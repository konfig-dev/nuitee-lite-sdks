/* tslint:disable */
/* eslint-disable */
/**
 * Lite API
 * lite api hotel booking api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * https://konfigthis.com
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Book400Response
 */
export interface Book400Response {
    /**
     * 
     * @type {Book400ResponseError}
     * @memberof Book400Response
     */
    'error'?: Book400ResponseError;
}
/**
 * 
 * @export
 * @interface Book400ResponseError
 */
export interface Book400ResponseError {
    /**
     * 
     * @type {string}
     * @memberof Book400ResponseError
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof Book400ResponseError
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof Book400ResponseError
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface Book401Response
 */
export interface Book401Response {
    /**
     * 
     * @type {string}
     * @memberof Book401Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface Book500Response
 */
export interface Book500Response {
    /**
     * 
     * @type {Book400ResponseError}
     * @memberof Book500Response
     */
    'error'?: Book400ResponseError;
}
/**
 * 
 * @export
 * @interface BookRequest
 */
export interface BookRequest {
    /**
     * prebook id retrived from prebook response
     * @type {string}
     * @memberof BookRequest
     */
    'prebookId': string;
    /**
     * session id retrieved from rates response
     * @type {string}
     * @memberof BookRequest
     */
    'sessionId'?: string;
    /**
     * 
     * @type {BookRequestGuestInfo}
     * @memberof BookRequest
     */
    'guestInfo'?: BookRequestGuestInfo;
    /**
     * rate id retrieved from prebook response
     * @type {string}
     * @memberof BookRequest
     */
    'rateId': string;
}
/**
 * 
 * @export
 * @interface BookRequestGuestInfo
 */
export interface BookRequestGuestInfo {
    /**
     * traveler first name
     * @type {string}
     * @memberof BookRequestGuestInfo
     */
    'guestFirstName': string;
    /**
     * traveler last name
     * @type {string}
     * @memberof BookRequestGuestInfo
     */
    'guestLastName': string;
    /**
     * traveler email
     * @type {string}
     * @memberof BookRequestGuestInfo
     */
    'guestEmail': string;
}
/**
 * 
 * @export
 * @interface BookResponse
 */
export interface BookResponse {
    /**
     * 
     * @type {BookResponseData}
     * @memberof BookResponse
     */
    'data'?: BookResponseData;
    /**
     * guests loyalty level granting them discounts and benefit
     * @type {number}
     * @memberof BookResponse
     */
    'guestLevel'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof BookResponse
     */
    'sandbox'?: boolean;
}
/**
 * 
 * @export
 * @interface BookResponseData
 */
export interface BookResponseData {
    /**
     * 
     * @type {string}
     * @memberof BookResponseData
     */
    'bookingId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookResponseData
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookResponseData
     */
    'hotelConfirmationCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookResponseData
     */
    'checkin'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookResponseData
     */
    'checkout'?: string;
    /**
     * 
     * @type {BookResponseDataHotel}
     * @memberof BookResponseData
     */
    'hotel'?: BookResponseDataHotel;
    /**
     * 
     * @type {Array<BookResponseDataBookedRoomsInner>}
     * @memberof BookResponseData
     */
    'bookedRooms'?: Array<BookResponseDataBookedRoomsInner>;
    /**
     * 
     * @type {BookResponseDataGuestInfo}
     * @memberof BookResponseData
     */
    'guestInfo'?: BookResponseDataGuestInfo;
    /**
     * 
     * @type {string}
     * @memberof BookResponseData
     */
    'createdAt'?: string;
    /**
     * 
     * @type {BookResponseDataCancellation}
     * @memberof BookResponseData
     */
    'cancellation'?: BookResponseDataCancellation;
    /**
     * 
     * @type {BookResponseDataCancellationPolicies}
     * @memberof BookResponseData
     */
    'cancellationPolicies'?: BookResponseDataCancellationPolicies;
    /**
     * 
     * @type {number}
     * @memberof BookResponseData
     */
    'price'?: number;
}
/**
 * 
 * @export
 * @interface BookResponseDataBookedRoomsInner
 */
export interface BookResponseDataBookedRoomsInner {
    /**
     * 
     * @type {BookResponseDataBookedRoomsInnerRoomType}
     * @memberof BookResponseDataBookedRoomsInner
     */
    'roomType'?: BookResponseDataBookedRoomsInnerRoomType;
    /**
     * 
     * @type {number}
     * @memberof BookResponseDataBookedRoomsInner
     */
    'adults'?: number;
    /**
     * 
     * @type {number}
     * @memberof BookResponseDataBookedRoomsInner
     */
    'children'?: number;
    /**
     * 
     * @type {BookResponseDataBookedRoomsInnerRate}
     * @memberof BookResponseDataBookedRoomsInner
     */
    'rate'?: BookResponseDataBookedRoomsInnerRate;
}
/**
 * 
 * @export
 * @interface BookResponseDataBookedRoomsInnerRate
 */
export interface BookResponseDataBookedRoomsInnerRate {
    /**
     * 
     * @type {string}
     * @memberof BookResponseDataBookedRoomsInnerRate
     */
    'rateId'?: string;
    /**
     * 
     * @type {number}
     * @memberof BookResponseDataBookedRoomsInnerRate
     */
    'maxOccupancy'?: number;
    /**
     * 
     * @type {BookResponseDataBookedRoomsInnerRateRetailRate}
     * @memberof BookResponseDataBookedRoomsInnerRate
     */
    'retailRate'?: BookResponseDataBookedRoomsInnerRateRetailRate;
}
/**
 * 
 * @export
 * @interface BookResponseDataBookedRoomsInnerRateRetailRate
 */
export interface BookResponseDataBookedRoomsInnerRateRetailRate {
    /**
     * 
     * @type {GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerRetailRateTotalInner}
     * @memberof BookResponseDataBookedRoomsInnerRateRetailRate
     */
    'total'?: GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerRetailRateTotalInner;
}
/**
 * 
 * @export
 * @interface BookResponseDataBookedRoomsInnerRoomType
 */
export interface BookResponseDataBookedRoomsInnerRoomType {
    /**
     * 
     * @type {string}
     * @memberof BookResponseDataBookedRoomsInnerRoomType
     */
    'roomTypeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookResponseDataBookedRoomsInnerRoomType
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface BookResponseDataCancellation
 */
export interface BookResponseDataCancellation {
    /**
     * 
     * @type {BookResponseDataCancellationFee}
     * @memberof BookResponseDataCancellation
     */
    'fee'?: BookResponseDataCancellationFee;
}
/**
 * 
 * @export
 * @interface BookResponseDataCancellationFee
 */
export interface BookResponseDataCancellationFee {
    /**
     * 
     * @type {string}
     * @memberof BookResponseDataCancellationFee
     */
    'type'?: string;
    /**
     * 
     * @type {number}
     * @memberof BookResponseDataCancellationFee
     */
    'count'?: number;
    /**
     * 
     * @type {GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerRetailRateTotalInner}
     * @memberof BookResponseDataCancellationFee
     */
    'price'?: GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerRetailRateTotalInner;
}
/**
 * 
 * @export
 * @interface BookResponseDataCancellationPolicies
 */
export interface BookResponseDataCancellationPolicies {
    /**
     * 
     * @type {Array<PrebookResponseDataRoomTypesInnerRatesInnerCancellationPoliciesCancelPolicyInfosInner>}
     * @memberof BookResponseDataCancellationPolicies
     */
    'cancelPolicyInfos'?: Array<PrebookResponseDataRoomTypesInnerRatesInnerCancellationPoliciesCancelPolicyInfosInner>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BookResponseDataCancellationPolicies
     */
    'hotelRemarks'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof BookResponseDataCancellationPolicies
     */
    'refundableTag'?: string;
}
/**
 * 
 * @export
 * @interface BookResponseDataGuestInfo
 */
export interface BookResponseDataGuestInfo {
    /**
     * 
     * @type {string}
     * @memberof BookResponseDataGuestInfo
     */
    'guestFirstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookResponseDataGuestInfo
     */
    'guestLastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookResponseDataGuestInfo
     */
    'guestEmail'?: string;
}
/**
 * 
 * @export
 * @interface BookResponseDataHotel
 */
export interface BookResponseDataHotel {
    /**
     * 
     * @type {string}
     * @memberof BookResponseDataHotel
     */
    'hotelId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookResponseDataHotel
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof BookResponseDataHotel
     */
    'starRating'?: number;
    /**
     * 
     * @type {BookResponseDataHotelAddress}
     * @memberof BookResponseDataHotel
     */
    'address'?: BookResponseDataHotelAddress;
    /**
     * 
     * @type {BookResponseDataHotelLocation}
     * @memberof BookResponseDataHotel
     */
    'location'?: BookResponseDataHotelLocation;
}
/**
 * 
 * @export
 * @interface BookResponseDataHotelAddress
 */
export interface BookResponseDataHotelAddress {
    /**
     * 
     * @type {string}
     * @memberof BookResponseDataHotelAddress
     */
    'line1'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookResponseDataHotelAddress
     */
    'line2'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookResponseDataHotelAddress
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookResponseDataHotelAddress
     */
    'postalCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookResponseDataHotelAddress
     */
    'region'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookResponseDataHotelAddress
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookResponseDataHotelAddress
     */
    'countryName'?: string;
}
/**
 * 
 * @export
 * @interface BookResponseDataHotelLocation
 */
export interface BookResponseDataHotelLocation {
    /**
     * 
     * @type {number}
     * @memberof BookResponseDataHotelLocation
     */
    'latitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof BookResponseDataHotelLocation
     */
    'longitude'?: number;
}
/**
 * 
 * @export
 * @interface Cancel400Response
 */
export interface Cancel400Response {
    /**
     * 
     * @type {Cancel400ResponseError}
     * @memberof Cancel400Response
     */
    'error'?: Cancel400ResponseError;
}
/**
 * 
 * @export
 * @interface Cancel400ResponseError
 */
export interface Cancel400ResponseError {
    /**
     * 
     * @type {number}
     * @memberof Cancel400ResponseError
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof Cancel400ResponseError
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface Cancel401Response
 */
export interface Cancel401Response {
    /**
     * 
     * @type {string}
     * @memberof Cancel401Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface Cancel500Response
 */
export interface Cancel500Response {
    /**
     * 
     * @type {Cancel400ResponseError}
     * @memberof Cancel500Response
     */
    'error'?: Cancel400ResponseError;
}
/**
 * 
 * @export
 * @interface CancelResponse
 */
export interface CancelResponse {
    /**
     * 
     * @type {string}
     * @memberof CancelResponse
     */
    'bookingId'?: string;
    /**
     * 
     * @type {number}
     * @memberof CancelResponse
     */
    'cancellation_fee'?: number;
    /**
     * 
     * @type {string}
     * @memberof CancelResponse
     */
    'currency'?: string;
    /**
     * 
     * @type {number}
     * @memberof CancelResponse
     */
    'refund_amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof CancelResponse
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface GetHotelRates400Response
 */
export interface GetHotelRates400Response {
    /**
     * 
     * @type {GetHotels400ResponseError}
     * @memberof GetHotelRates400Response
     */
    'error'?: GetHotels400ResponseError;
}
/**
 * 
 * @export
 * @interface GetHotelRates401Response
 */
export interface GetHotelRates401Response {
    /**
     * 
     * @type {string}
     * @memberof GetHotelRates401Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface GetHotelRatesResponse
 */
export interface GetHotelRatesResponse {
    /**
     * 
     * @type {Array<GetHotelRatesResponseDataInner>}
     * @memberof GetHotelRatesResponse
     */
    'data'?: Array<GetHotelRatesResponseDataInner>;
    /**
     * guests loyalty level granting them discounts and benefits
     * @type {number}
     * @memberof GetHotelRatesResponse
     */
    'guestLevel'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GetHotelRatesResponse
     */
    'sandbox'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetHotelRatesResponse
     */
    'sessionId'?: string;
}
/**
 * 
 * @export
 * @interface GetHotelRatesResponseDataInner
 */
export interface GetHotelRatesResponseDataInner {
    /**
     * 
     * @type {string}
     * @memberof GetHotelRatesResponseDataInner
     */
    'hotelId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetHotelRatesResponseDataInner
     */
    'termsAndConditions'?: string;
    /**
     * 
     * @type {Array<GetHotelRatesResponseDataInnerRoomTypesInner>}
     * @memberof GetHotelRatesResponseDataInner
     */
    'roomTypes'?: Array<GetHotelRatesResponseDataInnerRoomTypesInner>;
}
/**
 * 
 * @export
 * @interface GetHotelRatesResponseDataInnerRoomTypesInner
 */
export interface GetHotelRatesResponseDataInnerRoomTypesInner {
    /**
     * 
     * @type {string}
     * @memberof GetHotelRatesResponseDataInnerRoomTypesInner
     */
    'roomTypeId'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetHotelRatesResponseDataInnerRoomTypesInner
     */
    'maxOccupancy'?: number;
    /**
     * 
     * @type {Array<GetHotelRatesResponseDataInnerRoomTypesInnerRatesInner>}
     * @memberof GetHotelRatesResponseDataInnerRoomTypesInner
     */
    'rates'?: Array<GetHotelRatesResponseDataInnerRoomTypesInnerRatesInner>;
}
/**
 * 
 * @export
 * @interface GetHotelRatesResponseDataInnerRoomTypesInnerRatesInner
 */
export interface GetHotelRatesResponseDataInnerRoomTypesInnerRatesInner {
    /**
     * 
     * @type {string}
     * @memberof GetHotelRatesResponseDataInnerRoomTypesInnerRatesInner
     */
    'rateId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetHotelRatesResponseDataInnerRoomTypesInnerRatesInner
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetHotelRatesResponseDataInnerRoomTypesInnerRatesInner
     */
    'maxOccupancy'?: number;
    /**
     * 
     * @type {GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerRetailRate}
     * @memberof GetHotelRatesResponseDataInnerRoomTypesInnerRatesInner
     */
    'retailRate'?: GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerRetailRate;
    /**
     * 
     * @type {GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerCancellationPolicies}
     * @memberof GetHotelRatesResponseDataInnerRoomTypesInnerRatesInner
     */
    'cancellationPolicies'?: GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerCancellationPolicies;
}
/**
 * 
 * @export
 * @interface GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerCancellationPolicies
 */
export interface GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerCancellationPolicies {
    /**
     * 
     * @type {Array<GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerCancellationPoliciesCancelPolicyInfosInner>}
     * @memberof GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerCancellationPolicies
     */
    'cancelPolicyInfos'?: Array<GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerCancellationPoliciesCancelPolicyInfosInner> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerCancellationPolicies
     */
    'hotelRemarks'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerCancellationPolicies
     */
    'refundableTag'?: string;
}
/**
 * 
 * @export
 * @interface GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerCancellationPoliciesCancelPolicyInfosInner
 */
export interface GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerCancellationPoliciesCancelPolicyInfosInner {
    /**
     * 
     * @type {string}
     * @memberof GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerCancellationPoliciesCancelPolicyInfosInner
     */
    'cancelTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerCancellationPoliciesCancelPolicyInfosInner
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerCancellationPoliciesCancelPolicyInfosInner
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerCancellationPoliciesCancelPolicyInfosInner
     */
    'currency'?: string;
}
/**
 * 
 * @export
 * @interface GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerRetailRate
 */
export interface GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerRetailRate {
    /**
     * 
     * @type {Array<GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerRetailRateTotalInner>}
     * @memberof GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerRetailRate
     */
    'total'?: Array<GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerRetailRateTotalInner>;
    /**
     * 
     * @type {Array<GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner>}
     * @memberof GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerRetailRate
     */
    'taxesAndFees'?: Array<GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner> | null;
}
/**
 * 
 * @export
 * @interface GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner
 */
export interface GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner {
    /**
     * 
     * @type {string}
     * @memberof GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner
     */
    'included'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner
     */
    'currency'?: string;
}
/**
 * 
 * @export
 * @interface GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerRetailRateTotalInner
 */
export interface GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerRetailRateTotalInner {
    /**
     * 
     * @type {number}
     * @memberof GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerRetailRateTotalInner
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerRetailRateTotalInner
     */
    'currency'?: string;
}
/**
 * 
 * @export
 * @interface GetHotels400Response
 */
export interface GetHotels400Response {
    /**
     * 
     * @type {GetHotels400ResponseError}
     * @memberof GetHotels400Response
     */
    'error'?: GetHotels400ResponseError;
}
/**
 * 
 * @export
 * @interface GetHotels400ResponseError
 */
export interface GetHotels400ResponseError {
    /**
     * 
     * @type {number}
     * @memberof GetHotels400ResponseError
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetHotels400ResponseError
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface GetHotels401Response
 */
export interface GetHotels401Response {
    /**
     * 
     * @type {GetHotels401ResponseError}
     * @memberof GetHotels401Response
     */
    'error'?: GetHotels401ResponseError;
}
/**
 * 
 * @export
 * @interface GetHotels401ResponseError
 */
export interface GetHotels401ResponseError {
    /**
     * 
     * @type {number}
     * @memberof GetHotels401ResponseError
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetHotels401ResponseError
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface GetHotelsResponse
 */
export interface GetHotelsResponse {
    /**
     * 
     * @type {Array<GetHotelsResponseDataInner>}
     * @memberof GetHotelsResponse
     */
    'data'?: Array<GetHotelsResponseDataInner>;
    /**
     * guests loyalty level granting them discounts and benefits 
     * @type {number}
     * @memberof GetHotelsResponse
     */
    'guestLevel'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GetHotelsResponse
     */
    'sandbox'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetHotelsResponse
     */
    'sessionId'?: string;
}
/**
 * 
 * @export
 * @interface GetHotelsResponseDataInner
 */
export interface GetHotelsResponseDataInner {
    /**
     * 
     * @type {string}
     * @memberof GetHotelsResponseDataInner
     */
    'hotelId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetHotelsResponseDataInner
     */
    'currency'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetHotelsResponseDataInner
     */
    'price'?: number;
}
/**
 * 
 * @export
 * @interface ListBookingsResponse
 */
export interface ListBookingsResponse {
    /**
     * 
     * @type {Array<ListBookingsResponseDataInner>}
     * @memberof ListBookingsResponse
     */
    'data'?: Array<ListBookingsResponseDataInner>;
}
/**
 * 
 * @export
 * @interface ListBookingsResponseDataInner
 */
export interface ListBookingsResponseDataInner {
    /**
     * 
     * @type {string}
     * @memberof ListBookingsResponseDataInner
     */
    'bookingId'?: string;
}
/**
 * 
 * @export
 * @interface ListCitiesResponse
 */
export interface ListCitiesResponse {
    /**
     * 
     * @type {Array<ListCitiesResponseDataInner>}
     * @memberof ListCitiesResponse
     */
    'data'?: Array<ListCitiesResponseDataInner>;
}
/**
 * 
 * @export
 * @interface ListCitiesResponseDataInner
 */
export interface ListCitiesResponseDataInner {
    /**
     * 
     * @type {string}
     * @memberof ListCitiesResponseDataInner
     */
    'city'?: string;
}
/**
 * 
 * @export
 * @interface ListCountriesResponse
 */
export interface ListCountriesResponse {
    /**
     * 
     * @type {Array<ListCountriesResponseDataInner>}
     * @memberof ListCountriesResponse
     */
    'data'?: Array<ListCountriesResponseDataInner>;
}
/**
 * 
 * @export
 * @interface ListCountriesResponseDataInner
 */
export interface ListCountriesResponseDataInner {
    /**
     * country code
     * @type {string}
     * @memberof ListCountriesResponseDataInner
     */
    'code'?: string;
    /**
     * country name
     * @type {string}
     * @memberof ListCountriesResponseDataInner
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface ListCurrenciesResponse
 */
export interface ListCurrenciesResponse {
    /**
     * 
     * @type {Array<ListCurrenciesResponseDataInner>}
     * @memberof ListCurrenciesResponse
     */
    'data'?: Array<ListCurrenciesResponseDataInner>;
}
/**
 * 
 * @export
 * @interface ListCurrenciesResponseDataInner
 */
export interface ListCurrenciesResponseDataInner {
    /**
     * 
     * @type {string}
     * @memberof ListCurrenciesResponseDataInner
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListCurrenciesResponseDataInner
     */
    'number'?: string;
    /**
     * 
     * @type {number}
     * @memberof ListCurrenciesResponseDataInner
     */
    'digits'?: number;
    /**
     * 
     * @type {string}
     * @memberof ListCurrenciesResponseDataInner
     */
    'currency'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListCurrenciesResponseDataInner
     */
    'countries'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ListHotels400Response
 */
export interface ListHotels400Response {
    /**
     * 
     * @type {Book400ResponseError}
     * @memberof ListHotels400Response
     */
    'error'?: Book400ResponseError;
}
/**
 * 
 * @export
 * @interface ListHotels401Response
 */
export interface ListHotels401Response {
    /**
     * 
     * @type {string}
     * @memberof ListHotels401Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ListHotelsResponse
 */
export interface ListHotelsResponse {
    /**
     * 
     * @type {Array<ListHotelsResponseDataInner>}
     * @memberof ListHotelsResponse
     */
    'data'?: Array<ListHotelsResponseDataInner>;
    /**
     * 
     * @type {number}
     * @memberof ListHotelsResponse
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface ListHotelsResponseDataInner
 */
export interface ListHotelsResponseDataInner {
    /**
     * 
     * @type {number}
     * @memberof ListHotelsResponseDataInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ListHotelsResponseDataInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListHotelsResponseDataInner
     */
    'hotelDescription'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListHotelsResponseDataInner
     */
    'hotelImportantInformation'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListHotelsResponseDataInner
     */
    'currency'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListHotelsResponseDataInner
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListHotelsResponseDataInner
     */
    'city'?: string;
    /**
     * 
     * @type {number}
     * @memberof ListHotelsResponseDataInner
     */
    'latitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof ListHotelsResponseDataInner
     */
    'longitude'?: number;
    /**
     * 
     * @type {string}
     * @memberof ListHotelsResponseDataInner
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListHotelsResponseDataInner
     */
    'zip'?: string;
}
/**
 * 
 * @export
 * @interface ListIataCodesResponse
 */
export interface ListIataCodesResponse {
    /**
     * 
     * @type {Array<ListIataCodesResponseDataInner>}
     * @memberof ListIataCodesResponse
     */
    'data'?: Array<ListIataCodesResponseDataInner>;
}
/**
 * 
 * @export
 * @interface ListIataCodesResponseDataInner
 */
export interface ListIataCodesResponseDataInner {
    /**
     * IATA code
     * @type {string}
     * @memberof ListIataCodesResponseDataInner
     */
    'code'?: string;
    /**
     * IATA location name
     * @type {string}
     * @memberof ListIataCodesResponseDataInner
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ListIataCodesResponseDataInner
     */
    'latitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof ListIataCodesResponseDataInner
     */
    'longitude'?: number;
    /**
     * country code
     * @type {string}
     * @memberof ListIataCodesResponseDataInner
     */
    'countryCode'?: string;
}
/**
 * 
 * @export
 * @interface Prebook401Response
 */
export interface Prebook401Response {
    /**
     * 
     * @type {string}
     * @memberof Prebook401Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface PrebookRequest
 */
export interface PrebookRequest {
    /**
     * session id retrievied from rates response
     * @type {string}
     * @memberof PrebookRequest
     */
    'sessionId'?: string;
    /**
     * rate id retrieved from rates response
     * @type {string}
     * @memberof PrebookRequest
     */
    'rateId': string;
}
/**
 * 
 * @export
 * @interface PrebookResponse
 */
export interface PrebookResponse {
    /**
     * 
     * @type {PrebookResponseData}
     * @memberof PrebookResponse
     */
    'data'?: PrebookResponseData;
    /**
     * guests loyalty level granting them discounts and benefit
     * @type {number}
     * @memberof PrebookResponse
     */
    'guestLevel'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PrebookResponse
     */
    'sandbox'?: boolean;
}
/**
 * 
 * @export
 * @interface PrebookResponseData
 */
export interface PrebookResponseData {
    /**
     * 
     * @type {string}
     * @memberof PrebookResponseData
     */
    'prebookId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PrebookResponseData
     */
    'hotelId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PrebookResponseData
     */
    'currency'?: string;
    /**
     * 
     * @type {string}
     * @memberof PrebookResponseData
     */
    'termsAndConditions'?: string;
    /**
     * 
     * @type {Array<PrebookResponseDataRoomTypesInner>}
     * @memberof PrebookResponseData
     */
    'roomTypes'?: Array<PrebookResponseDataRoomTypesInner>;
    /**
     * 
     * @type {number}
     * @memberof PrebookResponseData
     */
    'price'?: number;
    /**
     * the difference percentage if rate price has changed
     * @type {number}
     * @memberof PrebookResponseData
     */
    'priceDifferencePercent'?: number;
    /**
     * has cancellation changed
     * @type {boolean}
     * @memberof PrebookResponseData
     */
    'cancellationChanged'?: boolean;
    /**
     * has board changed
     * @type {boolean}
     * @memberof PrebookResponseData
     */
    'boardChanged'?: boolean;
}
/**
 * 
 * @export
 * @interface PrebookResponseDataRoomTypesInner
 */
export interface PrebookResponseDataRoomTypesInner {
    /**
     * 
     * @type {number}
     * @memberof PrebookResponseDataRoomTypesInner
     */
    'maxOccupancy'?: number;
    /**
     * 
     * @type {Array<PrebookResponseDataRoomTypesInnerRatesInner>}
     * @memberof PrebookResponseDataRoomTypesInner
     */
    'rates'?: Array<PrebookResponseDataRoomTypesInnerRatesInner>;
}
/**
 * 
 * @export
 * @interface PrebookResponseDataRoomTypesInnerRatesInner
 */
export interface PrebookResponseDataRoomTypesInnerRatesInner {
    /**
     * 
     * @type {string}
     * @memberof PrebookResponseDataRoomTypesInnerRatesInner
     */
    'rateId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PrebookResponseDataRoomTypesInnerRatesInner
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof PrebookResponseDataRoomTypesInnerRatesInner
     */
    'maxOccupancy'?: number;
    /**
     * 
     * @type {PrebookResponseDataRoomTypesInnerRatesInnerRetailRate}
     * @memberof PrebookResponseDataRoomTypesInnerRatesInner
     */
    'retailRate'?: PrebookResponseDataRoomTypesInnerRatesInnerRetailRate;
    /**
     * 
     * @type {PrebookResponseDataRoomTypesInnerRatesInnerCancellationPolicies}
     * @memberof PrebookResponseDataRoomTypesInnerRatesInner
     */
    'cancellationPolicies'?: PrebookResponseDataRoomTypesInnerRatesInnerCancellationPolicies;
}
/**
 * 
 * @export
 * @interface PrebookResponseDataRoomTypesInnerRatesInnerCancellationPolicies
 */
export interface PrebookResponseDataRoomTypesInnerRatesInnerCancellationPolicies {
    /**
     * 
     * @type {Array<PrebookResponseDataRoomTypesInnerRatesInnerCancellationPoliciesCancelPolicyInfosInner>}
     * @memberof PrebookResponseDataRoomTypesInnerRatesInnerCancellationPolicies
     */
    'cancelPolicyInfos'?: Array<PrebookResponseDataRoomTypesInnerRatesInnerCancellationPoliciesCancelPolicyInfosInner>;
    /**
     * 
     * @type {Array<object>}
     * @memberof PrebookResponseDataRoomTypesInnerRatesInnerCancellationPolicies
     */
    'hotelRemarks'?: Array<object>;
    /**
     * 
     * @type {string}
     * @memberof PrebookResponseDataRoomTypesInnerRatesInnerCancellationPolicies
     */
    'refundableTag'?: string;
}
/**
 * 
 * @export
 * @interface PrebookResponseDataRoomTypesInnerRatesInnerCancellationPoliciesCancelPolicyInfosInner
 */
export interface PrebookResponseDataRoomTypesInnerRatesInnerCancellationPoliciesCancelPolicyInfosInner {
    /**
     * 
     * @type {string}
     * @memberof PrebookResponseDataRoomTypesInnerRatesInnerCancellationPoliciesCancelPolicyInfosInner
     */
    'cancelTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof PrebookResponseDataRoomTypesInnerRatesInnerCancellationPoliciesCancelPolicyInfosInner
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof PrebookResponseDataRoomTypesInnerRatesInnerCancellationPoliciesCancelPolicyInfosInner
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface PrebookResponseDataRoomTypesInnerRatesInnerRetailRate
 */
export interface PrebookResponseDataRoomTypesInnerRatesInnerRetailRate {
    /**
     * 
     * @type {Array<GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerRetailRateTotalInner>}
     * @memberof PrebookResponseDataRoomTypesInnerRatesInnerRetailRate
     */
    'total'?: Array<GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerRetailRateTotalInner>;
    /**
     * 
     * @type {Array<GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner>}
     * @memberof PrebookResponseDataRoomTypesInnerRatesInnerRetailRate
     */
    'taxesAndFees'?: Array<GetHotelRatesResponseDataInnerRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner>;
}
/**
 * 
 * @export
 * @interface Retrieve400Response
 */
export interface Retrieve400Response {
    /**
     * 
     * @type {Retrieve400ResponseError}
     * @memberof Retrieve400Response
     */
    'error'?: Retrieve400ResponseError;
}
/**
 * 
 * @export
 * @interface Retrieve400ResponseError
 */
export interface Retrieve400ResponseError {
    /**
     * 
     * @type {number}
     * @memberof Retrieve400ResponseError
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof Retrieve400ResponseError
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface RetrieveResponse
 */
export interface RetrieveResponse {
    /**
     * 
     * @type {RetrieveResponseData}
     * @memberof RetrieveResponse
     */
    'data'?: RetrieveResponseData;
}
/**
 * 
 * @export
 * @interface RetrieveResponseData
 */
export interface RetrieveResponseData {
    /**
     * 
     * @type {string}
     * @memberof RetrieveResponseData
     */
    'bookingId'?: string;
    /**
     * 
     * @type {string}
     * @memberof RetrieveResponseData
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof RetrieveResponseData
     */
    'hotelConfirmationCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof RetrieveResponseData
     */
    'checkin'?: string;
    /**
     * 
     * @type {string}
     * @memberof RetrieveResponseData
     */
    'checkout'?: string;
    /**
     * 
     * @type {Array<RetrieveResponseDataBookedRoomsInner>}
     * @memberof RetrieveResponseData
     */
    'bookedRooms'?: Array<RetrieveResponseDataBookedRoomsInner>;
    /**
     * 
     * @type {BookResponseDataGuestInfo}
     * @memberof RetrieveResponseData
     */
    'guestInfo'?: BookResponseDataGuestInfo;
    /**
     * 
     * @type {string}
     * @memberof RetrieveResponseData
     */
    'createdAt'?: string;
    /**
     * 
     * @type {RetrieveResponseDataCancellationPolicies}
     * @memberof RetrieveResponseData
     */
    'cancellationPolicies'?: RetrieveResponseDataCancellationPolicies;
}
/**
 * 
 * @export
 * @interface RetrieveResponseDataBookedRoomsInner
 */
export interface RetrieveResponseDataBookedRoomsInner {
    /**
     * 
     * @type {RetrieveResponseDataBookedRoomsInnerRoomType}
     * @memberof RetrieveResponseDataBookedRoomsInner
     */
    'roomType'?: RetrieveResponseDataBookedRoomsInnerRoomType;
    /**
     * 
     * @type {number}
     * @memberof RetrieveResponseDataBookedRoomsInner
     */
    'adults'?: number;
    /**
     * 
     * @type {number}
     * @memberof RetrieveResponseDataBookedRoomsInner
     */
    'childCount'?: number;
    /**
     * 
     * @type {RetrieveResponseDataBookedRoomsInnerRate}
     * @memberof RetrieveResponseDataBookedRoomsInner
     */
    'rate'?: RetrieveResponseDataBookedRoomsInnerRate;
}
/**
 * 
 * @export
 * @interface RetrieveResponseDataBookedRoomsInnerRate
 */
export interface RetrieveResponseDataBookedRoomsInnerRate {
    /**
     * 
     * @type {number}
     * @memberof RetrieveResponseDataBookedRoomsInnerRate
     */
    'maxOccupancy'?: number;
    /**
     * 
     * @type {BookResponseDataBookedRoomsInnerRateRetailRate}
     * @memberof RetrieveResponseDataBookedRoomsInnerRate
     */
    'retailRate'?: BookResponseDataBookedRoomsInnerRateRetailRate;
}
/**
 * 
 * @export
 * @interface RetrieveResponseDataBookedRoomsInnerRoomType
 */
export interface RetrieveResponseDataBookedRoomsInnerRoomType {
    /**
     * 
     * @type {string}
     * @memberof RetrieveResponseDataBookedRoomsInnerRoomType
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface RetrieveResponseDataCancellationPolicies
 */
export interface RetrieveResponseDataCancellationPolicies {
    /**
     * 
     * @type {Array<PrebookResponseDataRoomTypesInnerRatesInnerCancellationPoliciesCancelPolicyInfosInner>}
     * @memberof RetrieveResponseDataCancellationPolicies
     */
    'cancelPolicyInfos'?: Array<PrebookResponseDataRoomTypesInnerRatesInnerCancellationPoliciesCancelPolicyInfosInner> | null;
    /**
     * 
     * @type {string}
     * @memberof RetrieveResponseDataCancellationPolicies
     */
    'hotelRemarks'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RetrieveResponseDataCancellationPolicies
     */
    'refundableTag'?: string;
}

/**
 * BookApi - axios parameter creator
 * @export
 */
export const BookApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to send a specific prebook ID along with the email to confirm the booking for a specific room in a specific hotel.
         * @summary Hotel rate book
         * @param {BookRequest} [bookRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        book: async (bookRequest?: BookRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rates/book`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to send a specific rate ID along with the session ID to confirm the room availability, rates and cancellation policies in the response. A prebook-id is also part of the response which can be used to book a specific room in a hotel. 
         * @summary Hotel rate prebook
         * @param {PrebookRequest} [prebookRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prebook: async (prebookRequest?: PrebookRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rates/prebook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(prebookRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookApi - functional programming interface
 * @export
 */
export const BookApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to send a specific prebook ID along with the email to confirm the booking for a specific room in a specific hotel.
         * @summary Hotel rate book
         * @param {BookRequest} [bookRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async book(bookRequest?: BookRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.book(bookRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to send a specific rate ID along with the session ID to confirm the room availability, rates and cancellation policies in the response. A prebook-id is also part of the response which can be used to book a specific room in a hotel. 
         * @summary Hotel rate prebook
         * @param {PrebookRequest} [prebookRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async prebook(prebookRequest?: PrebookRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrebookResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.prebook(prebookRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BookApi - factory interface
 * @export
 */
export const BookApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BookApiFp(configuration)
    return {
        /**
         * This endpoint allows you to send a specific prebook ID along with the email to confirm the booking for a specific room in a specific hotel.
         * @summary Hotel rate book
         * @param {BookRequest} [bookRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        book(bookRequest?: BookRequest, options?: any): AxiosPromise<BookResponse> {
            return localVarFp.book(bookRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to send a specific rate ID along with the session ID to confirm the room availability, rates and cancellation policies in the response. A prebook-id is also part of the response which can be used to book a specific room in a hotel. 
         * @summary Hotel rate prebook
         * @param {PrebookRequest} [prebookRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prebook(prebookRequest?: PrebookRequest, options?: any): AxiosPromise<PrebookResponse> {
            return localVarFp.prebook(prebookRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BookApi - object-oriented interface
 * @export
 * @class BookApi
 * @extends {BaseAPI}
 */
export class BookApi extends BaseAPI {
    /**
     * This endpoint allows you to send a specific prebook ID along with the email to confirm the booking for a specific room in a specific hotel.
     * @summary Hotel rate book
     * @param {BookRequest} [bookRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public book(bookRequest?: BookRequest, options?: AxiosRequestConfig) {
        return BookApiFp(this.configuration).book(bookRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to send a specific rate ID along with the session ID to confirm the room availability, rates and cancellation policies in the response. A prebook-id is also part of the response which can be used to book a specific room in a hotel. 
     * @summary Hotel rate prebook
     * @param {PrebookRequest} [prebookRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public prebook(prebookRequest?: PrebookRequest, options?: AxiosRequestConfig) {
        return BookApiFp(this.configuration).prebook(prebookRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BookingManagementApi - axios parameter creator
 * @export
 */
export const BookingManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to cancel a booking based on a booking ID. The refund amount is based on the cancellation policies. <!-- theme: danger -->
         * @summary Booking cancel
         * @param {string} bookingId (Required) The unique identifier of the booking you would like to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancel: async (bookingId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookingId' is not null or undefined
            assertParamExists('cancel', 'bookingId', bookingId)
            const localVarPath = `/bookings/{bookingId}`
                .replace(`{${"bookingId"}}`, encodeURIComponent(String(bookingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List bookings by guestId
         * @summary Booking list
         * @param {string} guestId guest id of bookings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBookings: async (guestId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guestId' is not null or undefined
            assertParamExists('listBookings', 'guestId', guestId)
            const localVarPath = `/bookings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (guestId !== undefined) {
                localVarQueryParameter['guestId'] = guestId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to retrieve all the information for specific booking ID.
         * @summary Booking retrieve
         * @param {string} bookingId (Required) The unique identifier of the booking you would like to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve: async (bookingId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookingId' is not null or undefined
            assertParamExists('retrieve', 'bookingId', bookingId)
            const localVarPath = `/bookings/{bookingId}`
                .replace(`{${"bookingId"}}`, encodeURIComponent(String(bookingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookingManagementApi - functional programming interface
 * @export
 */
export const BookingManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookingManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to cancel a booking based on a booking ID. The refund amount is based on the cancellation policies. <!-- theme: danger -->
         * @summary Booking cancel
         * @param {string} bookingId (Required) The unique identifier of the booking you would like to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancel(bookingId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancel(bookingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List bookings by guestId
         * @summary Booking list
         * @param {string} guestId guest id of bookings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBookings(guestId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBookingsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBookings(guestId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to retrieve all the information for specific booking ID.
         * @summary Booking retrieve
         * @param {string} bookingId (Required) The unique identifier of the booking you would like to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieve(bookingId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieve(bookingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BookingManagementApi - factory interface
 * @export
 */
export const BookingManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BookingManagementApiFp(configuration)
    return {
        /**
         * This endpoint allows you to cancel a booking based on a booking ID. The refund amount is based on the cancellation policies. <!-- theme: danger -->
         * @summary Booking cancel
         * @param {string} bookingId (Required) The unique identifier of the booking you would like to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancel(bookingId: string, options?: any): AxiosPromise<CancelResponse> {
            return localVarFp.cancel(bookingId, options).then((request) => request(axios, basePath));
        },
        /**
         * List bookings by guestId
         * @summary Booking list
         * @param {string} guestId guest id of bookings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBookings(guestId: string, options?: any): AxiosPromise<ListBookingsResponse> {
            return localVarFp.listBookings(guestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to retrieve all the information for specific booking ID.
         * @summary Booking retrieve
         * @param {string} bookingId (Required) The unique identifier of the booking you would like to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(bookingId: string, options?: any): AxiosPromise<RetrieveResponse> {
            return localVarFp.retrieve(bookingId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BookingManagementApi - object-oriented interface
 * @export
 * @class BookingManagementApi
 * @extends {BaseAPI}
 */
export class BookingManagementApi extends BaseAPI {
    /**
     * This endpoint allows you to cancel a booking based on a booking ID. The refund amount is based on the cancellation policies. <!-- theme: danger -->
     * @summary Booking cancel
     * @param {string} bookingId (Required) The unique identifier of the booking you would like to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingManagementApi
     */
    public cancel(bookingId: string, options?: AxiosRequestConfig) {
        return BookingManagementApiFp(this.configuration).cancel(bookingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List bookings by guestId
     * @summary Booking list
     * @param {string} guestId guest id of bookings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingManagementApi
     */
    public listBookings(guestId: string, options?: AxiosRequestConfig) {
        return BookingManagementApiFp(this.configuration).listBookings(guestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to retrieve all the information for specific booking ID.
     * @summary Booking retrieve
     * @param {string} bookingId (Required) The unique identifier of the booking you would like to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingManagementApi
     */
    public retrieve(bookingId: string, options?: AxiosRequestConfig) {
        return BookingManagementApiFp(this.configuration).retrieve(bookingId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SearchApi - axios parameter creator
 * @export
 */
export const SearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to send a hotel ID with a specific date range and in response receive all the rooms, rates that are available along with the cancelllation policies.
         * @summary Hotel full rate availability
         * @param {string} hotelIds hotel ids separated by comma, max number of hotel ids is 10, example (2345,557,56)
         * @param {string} checkin start date yyyy-mm-dd format
         * @param {string} checkout end date yyyy-mm-dd format
         * @param {number} adults adults number
         * @param {string} guestNationality guest nationality country code iso-2 example (US)
         * @param {string} currency currency code example (USD)
         * @param {string} [children] children ages separated by a comma
         * @param {string} [sessionId] session id if retrieved from hotels search
         * @param {string} [travelerId] traveler unique id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHotelRates: async (hotelIds: string, checkin: string, checkout: string, adults: number, guestNationality: string, currency: string, children?: string, sessionId?: string, travelerId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hotelIds' is not null or undefined
            assertParamExists('getHotelRates', 'hotelIds', hotelIds)
            // verify required parameter 'checkin' is not null or undefined
            assertParamExists('getHotelRates', 'checkin', checkin)
            // verify required parameter 'checkout' is not null or undefined
            assertParamExists('getHotelRates', 'checkout', checkout)
            // verify required parameter 'adults' is not null or undefined
            assertParamExists('getHotelRates', 'adults', adults)
            // verify required parameter 'guestNationality' is not null or undefined
            assertParamExists('getHotelRates', 'guestNationality', guestNationality)
            // verify required parameter 'currency' is not null or undefined
            assertParamExists('getHotelRates', 'currency', currency)
            const localVarPath = `/hotels/rates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (hotelIds !== undefined) {
                localVarQueryParameter['hotelIds'] = hotelIds;
            }

            if (checkin !== undefined) {
                localVarQueryParameter['checkin'] = (checkin as any instanceof Date) ?
                    (checkin as any).toISOString().substr(0,10) :
                    checkin;
            }

            if (checkout !== undefined) {
                localVarQueryParameter['checkout'] = (checkout as any instanceof Date) ?
                    (checkout as any).toISOString().substr(0,10) :
                    checkout;
            }

            if (adults !== undefined) {
                localVarQueryParameter['adults'] = adults;
            }

            if (children !== undefined) {
                localVarQueryParameter['children'] = children;
            }

            if (guestNationality !== undefined) {
                localVarQueryParameter['guestNationality'] = guestNationality;
            }

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }

            if (sessionId !== undefined) {
                localVarQueryParameter['sessionId'] = sessionId;
            }

            if (travelerId !== undefined) {
                localVarQueryParameter['travelerId'] = travelerId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to send a list of hotel ID\'s for a specific date range and in response receive the best rate available for each of the hotel ID\'s. The limit is set to 200 hotels
         * @summary Hotel minimum rate availability
         * @param {string} hotelIds hotel ids separated by comma, max number of hotel ids is 10, example (2345,557,56)
         * @param {string} checkin 
         * @param {string} checkout 
         * @param {string} country 
         * @param {number} adults 
         * @param {string} currency 
         * @param {string} guestNationality 
         * @param {number} [latitude] 
         * @param {number} [longitude] 
         * @param {number} [distance] 
         * @param {string} [children] 
         * @param {string} [travelerId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHotels: async (hotelIds: string, checkin: string, checkout: string, country: string, adults: number, currency: string, guestNationality: string, latitude?: number, longitude?: number, distance?: number, children?: string, travelerId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hotelIds' is not null or undefined
            assertParamExists('getHotels', 'hotelIds', hotelIds)
            // verify required parameter 'checkin' is not null or undefined
            assertParamExists('getHotels', 'checkin', checkin)
            // verify required parameter 'checkout' is not null or undefined
            assertParamExists('getHotels', 'checkout', checkout)
            // verify required parameter 'country' is not null or undefined
            assertParamExists('getHotels', 'country', country)
            // verify required parameter 'adults' is not null or undefined
            assertParamExists('getHotels', 'adults', adults)
            // verify required parameter 'currency' is not null or undefined
            assertParamExists('getHotels', 'currency', currency)
            // verify required parameter 'guestNationality' is not null or undefined
            assertParamExists('getHotels', 'guestNationality', guestNationality)
            const localVarPath = `/hotels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (hotelIds !== undefined) {
                localVarQueryParameter['hotelIds'] = hotelIds;
            }

            if (checkin !== undefined) {
                localVarQueryParameter['checkin'] = (checkin as any instanceof Date) ?
                    (checkin as any).toISOString().substr(0,10) :
                    checkin;
            }

            if (checkout !== undefined) {
                localVarQueryParameter['checkout'] = (checkout as any instanceof Date) ?
                    (checkout as any).toISOString().substr(0,10) :
                    checkout;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (distance !== undefined) {
                localVarQueryParameter['distance'] = distance;
            }

            if (adults !== undefined) {
                localVarQueryParameter['adults'] = adults;
            }

            if (children !== undefined) {
                localVarQueryParameter['children'] = children;
            }

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }

            if (guestNationality !== undefined) {
                localVarQueryParameter['guestNationality'] = guestNationality;
            }

            if (travelerId !== undefined) {
                localVarQueryParameter['travelerId'] = travelerId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to send a hotel ID with a specific date range and in response receive all the rooms, rates that are available along with the cancelllation policies.
         * @summary Hotel full rate availability
         * @param {string} hotelIds hotel ids separated by comma, max number of hotel ids is 10, example (2345,557,56)
         * @param {string} checkin start date yyyy-mm-dd format
         * @param {string} checkout end date yyyy-mm-dd format
         * @param {number} adults adults number
         * @param {string} guestNationality guest nationality country code iso-2 example (US)
         * @param {string} currency currency code example (USD)
         * @param {string} [children] children ages separated by a comma
         * @param {string} [sessionId] session id if retrieved from hotels search
         * @param {string} [travelerId] traveler unique id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHotelRates(hotelIds: string, checkin: string, checkout: string, adults: number, guestNationality: string, currency: string, children?: string, sessionId?: string, travelerId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetHotelRatesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHotelRates(hotelIds, checkin, checkout, adults, guestNationality, currency, children, sessionId, travelerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to send a list of hotel ID\'s for a specific date range and in response receive the best rate available for each of the hotel ID\'s. The limit is set to 200 hotels
         * @summary Hotel minimum rate availability
         * @param {string} hotelIds hotel ids separated by comma, max number of hotel ids is 10, example (2345,557,56)
         * @param {string} checkin 
         * @param {string} checkout 
         * @param {string} country 
         * @param {number} adults 
         * @param {string} currency 
         * @param {string} guestNationality 
         * @param {number} [latitude] 
         * @param {number} [longitude] 
         * @param {number} [distance] 
         * @param {string} [children] 
         * @param {string} [travelerId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHotels(hotelIds: string, checkin: string, checkout: string, country: string, adults: number, currency: string, guestNationality: string, latitude?: number, longitude?: number, distance?: number, children?: string, travelerId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetHotelsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHotels(hotelIds, checkin, checkout, country, adults, currency, guestNationality, latitude, longitude, distance, children, travelerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchApiFp(configuration)
    return {
        /**
         * This endpoint allows you to send a hotel ID with a specific date range and in response receive all the rooms, rates that are available along with the cancelllation policies.
         * @summary Hotel full rate availability
         * @param {string} hotelIds hotel ids separated by comma, max number of hotel ids is 10, example (2345,557,56)
         * @param {string} checkin start date yyyy-mm-dd format
         * @param {string} checkout end date yyyy-mm-dd format
         * @param {number} adults adults number
         * @param {string} guestNationality guest nationality country code iso-2 example (US)
         * @param {string} currency currency code example (USD)
         * @param {string} [children] children ages separated by a comma
         * @param {string} [sessionId] session id if retrieved from hotels search
         * @param {string} [travelerId] traveler unique id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHotelRates(hotelIds: string, checkin: string, checkout: string, adults: number, guestNationality: string, currency: string, children?: string, sessionId?: string, travelerId?: string, options?: any): AxiosPromise<GetHotelRatesResponse> {
            return localVarFp.getHotelRates(hotelIds, checkin, checkout, adults, guestNationality, currency, children, sessionId, travelerId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to send a list of hotel ID\'s for a specific date range and in response receive the best rate available for each of the hotel ID\'s. The limit is set to 200 hotels
         * @summary Hotel minimum rate availability
         * @param {string} hotelIds hotel ids separated by comma, max number of hotel ids is 10, example (2345,557,56)
         * @param {string} checkin 
         * @param {string} checkout 
         * @param {string} country 
         * @param {number} adults 
         * @param {string} currency 
         * @param {string} guestNationality 
         * @param {number} [latitude] 
         * @param {number} [longitude] 
         * @param {number} [distance] 
         * @param {string} [children] 
         * @param {string} [travelerId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHotels(hotelIds: string, checkin: string, checkout: string, country: string, adults: number, currency: string, guestNationality: string, latitude?: number, longitude?: number, distance?: number, children?: string, travelerId?: string, options?: any): AxiosPromise<GetHotelsResponse> {
            return localVarFp.getHotels(hotelIds, checkin, checkout, country, adults, currency, guestNationality, latitude, longitude, distance, children, travelerId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export class SearchApi extends BaseAPI {
    /**
     * This endpoint allows you to send a hotel ID with a specific date range and in response receive all the rooms, rates that are available along with the cancelllation policies.
     * @summary Hotel full rate availability
     * @param {string} hotelIds hotel ids separated by comma, max number of hotel ids is 10, example (2345,557,56)
     * @param {string} checkin start date yyyy-mm-dd format
     * @param {string} checkout end date yyyy-mm-dd format
     * @param {number} adults adults number
     * @param {string} guestNationality guest nationality country code iso-2 example (US)
     * @param {string} currency currency code example (USD)
     * @param {string} [children] children ages separated by a comma
     * @param {string} [sessionId] session id if retrieved from hotels search
     * @param {string} [travelerId] traveler unique id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public getHotelRates(hotelIds: string, checkin: string, checkout: string, adults: number, guestNationality: string, currency: string, children?: string, sessionId?: string, travelerId?: string, options?: AxiosRequestConfig) {
        return SearchApiFp(this.configuration).getHotelRates(hotelIds, checkin, checkout, adults, guestNationality, currency, children, sessionId, travelerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to send a list of hotel ID\'s for a specific date range and in response receive the best rate available for each of the hotel ID\'s. The limit is set to 200 hotels
     * @summary Hotel minimum rate availability
     * @param {string} hotelIds hotel ids separated by comma, max number of hotel ids is 10, example (2345,557,56)
     * @param {string} checkin 
     * @param {string} checkout 
     * @param {string} country 
     * @param {number} adults 
     * @param {string} currency 
     * @param {string} guestNationality 
     * @param {number} [latitude] 
     * @param {number} [longitude] 
     * @param {number} [distance] 
     * @param {string} [children] 
     * @param {string} [travelerId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public getHotels(hotelIds: string, checkin: string, checkout: string, country: string, adults: number, currency: string, guestNationality: string, latitude?: number, longitude?: number, distance?: number, children?: string, travelerId?: string, options?: AxiosRequestConfig) {
        return SearchApiFp(this.configuration).getHotels(hotelIds, checkin, checkout, country, adults, currency, guestNationality, latitude, longitude, distance, children, travelerId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StaticDataApi - axios parameter creator
 * @export
 */
export const StaticDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary City list
         * @param {string} [countryCode] country code, example \&quot;IT\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCities: async (countryCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/data/cities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (countryCode !== undefined) {
                localVarQueryParameter['countryCode'] = countryCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * countries list
         * @summary Country list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCountries: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/data/countries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Currency list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCurrencies: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/data/currencies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hotel list
         * @param {string} countryCode country code Alpha-2 code (example US, RU, CN)
         * @param {string} [hotelName] hotel name
         * @param {string} [cityName] city name
         * @param {number} [limit] limit results (max value 1000)
         * @param {number} [offset] results offset
         * @param {number} [latitude] latitude geo coordinates
         * @param {number} [longitude] longtude geo coordinates
         * @param {number} [distance] the distance starting from the selected geopgraphic point
         * @param {string} [iataCode] airport iata code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listHotels: async (countryCode: string, hotelName?: string, cityName?: string, limit?: number, offset?: number, latitude?: number, longitude?: number, distance?: number, iataCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'countryCode' is not null or undefined
            assertParamExists('listHotels', 'countryCode', countryCode)
            const localVarPath = `/data/hotels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (hotelName !== undefined) {
                localVarQueryParameter['hotelName'] = hotelName;
            }

            if (cityName !== undefined) {
                localVarQueryParameter['cityName'] = cityName;
            }

            if (countryCode !== undefined) {
                localVarQueryParameter['countryCode'] = countryCode;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (distance !== undefined) {
                localVarQueryParameter['distance'] = distance;
            }

            if (iataCode !== undefined) {
                localVarQueryParameter['iataCode'] = iataCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IATA codes list
         * @summary IATA code list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIataCodes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/data/iataCodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StaticDataApi - functional programming interface
 * @export
 */
export const StaticDataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StaticDataApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary City list
         * @param {string} [countryCode] country code, example \&quot;IT\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCities(countryCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCitiesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCities(countryCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * countries list
         * @summary Country list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCountries(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCountriesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCountries(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Currency list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCurrencies(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCurrenciesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCurrencies(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Hotel list
         * @param {string} countryCode country code Alpha-2 code (example US, RU, CN)
         * @param {string} [hotelName] hotel name
         * @param {string} [cityName] city name
         * @param {number} [limit] limit results (max value 1000)
         * @param {number} [offset] results offset
         * @param {number} [latitude] latitude geo coordinates
         * @param {number} [longitude] longtude geo coordinates
         * @param {number} [distance] the distance starting from the selected geopgraphic point
         * @param {string} [iataCode] airport iata code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listHotels(countryCode: string, hotelName?: string, cityName?: string, limit?: number, offset?: number, latitude?: number, longitude?: number, distance?: number, iataCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListHotelsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listHotels(countryCode, hotelName, cityName, limit, offset, latitude, longitude, distance, iataCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IATA codes list
         * @summary IATA code list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listIataCodes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListIataCodesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listIataCodes(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StaticDataApi - factory interface
 * @export
 */
export const StaticDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StaticDataApiFp(configuration)
    return {
        /**
         * 
         * @summary City list
         * @param {string} [countryCode] country code, example \&quot;IT\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCities(countryCode?: string, options?: any): AxiosPromise<ListCitiesResponse> {
            return localVarFp.listCities(countryCode, options).then((request) => request(axios, basePath));
        },
        /**
         * countries list
         * @summary Country list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCountries(options?: any): AxiosPromise<ListCountriesResponse> {
            return localVarFp.listCountries(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Currency list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCurrencies(options?: any): AxiosPromise<ListCurrenciesResponse> {
            return localVarFp.listCurrencies(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hotel list
         * @param {string} countryCode country code Alpha-2 code (example US, RU, CN)
         * @param {string} [hotelName] hotel name
         * @param {string} [cityName] city name
         * @param {number} [limit] limit results (max value 1000)
         * @param {number} [offset] results offset
         * @param {number} [latitude] latitude geo coordinates
         * @param {number} [longitude] longtude geo coordinates
         * @param {number} [distance] the distance starting from the selected geopgraphic point
         * @param {string} [iataCode] airport iata code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listHotels(countryCode: string, hotelName?: string, cityName?: string, limit?: number, offset?: number, latitude?: number, longitude?: number, distance?: number, iataCode?: string, options?: any): AxiosPromise<ListHotelsResponse> {
            return localVarFp.listHotels(countryCode, hotelName, cityName, limit, offset, latitude, longitude, distance, iataCode, options).then((request) => request(axios, basePath));
        },
        /**
         * IATA codes list
         * @summary IATA code list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIataCodes(options?: any): AxiosPromise<ListIataCodesResponse> {
            return localVarFp.listIataCodes(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StaticDataApi - object-oriented interface
 * @export
 * @class StaticDataApi
 * @extends {BaseAPI}
 */
export class StaticDataApi extends BaseAPI {
    /**
     * 
     * @summary City list
     * @param {string} [countryCode] country code, example \&quot;IT\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaticDataApi
     */
    public listCities(countryCode?: string, options?: AxiosRequestConfig) {
        return StaticDataApiFp(this.configuration).listCities(countryCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * countries list
     * @summary Country list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaticDataApi
     */
    public listCountries(options?: AxiosRequestConfig) {
        return StaticDataApiFp(this.configuration).listCountries(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Currency list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaticDataApi
     */
    public listCurrencies(options?: AxiosRequestConfig) {
        return StaticDataApiFp(this.configuration).listCurrencies(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hotel list
     * @param {string} countryCode country code Alpha-2 code (example US, RU, CN)
     * @param {string} [hotelName] hotel name
     * @param {string} [cityName] city name
     * @param {number} [limit] limit results (max value 1000)
     * @param {number} [offset] results offset
     * @param {number} [latitude] latitude geo coordinates
     * @param {number} [longitude] longtude geo coordinates
     * @param {number} [distance] the distance starting from the selected geopgraphic point
     * @param {string} [iataCode] airport iata code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaticDataApi
     */
    public listHotels(countryCode: string, hotelName?: string, cityName?: string, limit?: number, offset?: number, latitude?: number, longitude?: number, distance?: number, iataCode?: string, options?: AxiosRequestConfig) {
        return StaticDataApiFp(this.configuration).listHotels(countryCode, hotelName, cityName, limit, offset, latitude, longitude, distance, iataCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IATA codes list
     * @summary IATA code list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaticDataApi
     */
    public listIataCodes(options?: AxiosRequestConfig) {
        return StaticDataApiFp(this.configuration).listIataCodes(options).then((request) => request(this.axios, this.basePath));
    }
}



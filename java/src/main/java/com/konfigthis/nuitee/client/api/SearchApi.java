/*
 * Lite API
 * lite api hotel booking api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.nuitee.client.api;

import com.konfigthis.nuitee.client.ApiCallback;
import com.konfigthis.nuitee.client.ApiClient;
import com.konfigthis.nuitee.client.ApiException;
import com.konfigthis.nuitee.client.ApiResponse;
import com.konfigthis.nuitee.client.Configuration;
import com.konfigthis.nuitee.client.Pair;
import com.konfigthis.nuitee.client.ProgressRequestBody;
import com.konfigthis.nuitee.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import com.konfigthis.nuitee.client.model.GetHotelRates400Response;
import com.konfigthis.nuitee.client.model.GetHotelRates401Response;
import com.konfigthis.nuitee.client.model.GetHotelRatesResponse;
import com.konfigthis.nuitee.client.model.GetHotels400Response;
import com.konfigthis.nuitee.client.model.GetHotels401Response;
import com.konfigthis.nuitee.client.model.GetHotelsResponse;
import java.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SearchApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getHotelRates
     * @param hotelIds hotel ids separated by comma, max number of hotel ids is 10, example (2345,557,56) (required)
     * @param checkin start date yyyy-mm-dd format (required)
     * @param checkout end date yyyy-mm-dd format (required)
     * @param adults adults number (required)
     * @param guestNationality guest nationality country code iso-2 example (US) (required)
     * @param currency currency code example (USD) (required)
     * @param children children ages separated by a comma (optional)
     * @param sessionId session id if retrieved from hotels search (optional)
     * @param travelerId traveler unique id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Credentials -  <br>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Expose-Headers -  <br>  * Access-Control-Max-Age -  <br>  * Content-Type -  <br>  * Date -  <br>  * Content-Length -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHotelRatesCall(String hotelIds, LocalDate checkin, LocalDate checkout, Integer adults, String guestNationality, String currency, String children, String sessionId, String travelerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hotels/rates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hotelIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hotelIds", hotelIds));
        }

        if (checkin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkin", checkin));
        }

        if (checkout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkout", checkout));
        }

        if (adults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("adults", adults));
        }

        if (children != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("children", children));
        }

        if (guestNationality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("guestNationality", guestNationality));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (sessionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sessionId", sessionId));
        }

        if (travelerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("travelerId", travelerId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHotelRatesValidateBeforeCall(String hotelIds, LocalDate checkin, LocalDate checkout, Integer adults, String guestNationality, String currency, String children, String sessionId, String travelerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hotelIds' is set
        if (hotelIds == null) {
            throw new ApiException("Missing the required parameter 'hotelIds' when calling getHotelRates(Async)");
        }

        // verify the required parameter 'checkin' is set
        if (checkin == null) {
            throw new ApiException("Missing the required parameter 'checkin' when calling getHotelRates(Async)");
        }

        // verify the required parameter 'checkout' is set
        if (checkout == null) {
            throw new ApiException("Missing the required parameter 'checkout' when calling getHotelRates(Async)");
        }

        // verify the required parameter 'adults' is set
        if (adults == null) {
            throw new ApiException("Missing the required parameter 'adults' when calling getHotelRates(Async)");
        }

        // verify the required parameter 'guestNationality' is set
        if (guestNationality == null) {
            throw new ApiException("Missing the required parameter 'guestNationality' when calling getHotelRates(Async)");
        }

        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling getHotelRates(Async)");
        }

        return getHotelRatesCall(hotelIds, checkin, checkout, adults, guestNationality, currency, children, sessionId, travelerId, _callback);

    }

    /**
     * Hotel full rate availability
     * This endpoint allows you to send a hotel ID with a specific date range and in response receive all the rooms, rates that are available along with the cancelllation policies.
     * @param hotelIds hotel ids separated by comma, max number of hotel ids is 10, example (2345,557,56) (required)
     * @param checkin start date yyyy-mm-dd format (required)
     * @param checkout end date yyyy-mm-dd format (required)
     * @param adults adults number (required)
     * @param guestNationality guest nationality country code iso-2 example (US) (required)
     * @param currency currency code example (USD) (required)
     * @param children children ages separated by a comma (optional)
     * @param sessionId session id if retrieved from hotels search (optional)
     * @param travelerId traveler unique id (optional)
     * @return GetHotelRatesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Credentials -  <br>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Expose-Headers -  <br>  * Access-Control-Max-Age -  <br>  * Content-Type -  <br>  * Date -  <br>  * Content-Length -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public GetHotelRatesResponse getHotelRates(String hotelIds, LocalDate checkin, LocalDate checkout, Integer adults, String guestNationality, String currency, String children, String sessionId, String travelerId) throws ApiException {
        ApiResponse<GetHotelRatesResponse> localVarResp = getHotelRatesWithHttpInfo(hotelIds, checkin, checkout, adults, guestNationality, currency, children, sessionId, travelerId);
        return localVarResp.getData();
    }

    /**
     * Hotel full rate availability
     * This endpoint allows you to send a hotel ID with a specific date range and in response receive all the rooms, rates that are available along with the cancelllation policies.
     * @param hotelIds hotel ids separated by comma, max number of hotel ids is 10, example (2345,557,56) (required)
     * @param checkin start date yyyy-mm-dd format (required)
     * @param checkout end date yyyy-mm-dd format (required)
     * @param adults adults number (required)
     * @param guestNationality guest nationality country code iso-2 example (US) (required)
     * @param currency currency code example (USD) (required)
     * @param children children ages separated by a comma (optional)
     * @param sessionId session id if retrieved from hotels search (optional)
     * @param travelerId traveler unique id (optional)
     * @return ApiResponse&lt;GetHotelRatesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Credentials -  <br>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Expose-Headers -  <br>  * Access-Control-Max-Age -  <br>  * Content-Type -  <br>  * Date -  <br>  * Content-Length -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetHotelRatesResponse> getHotelRatesWithHttpInfo(String hotelIds, LocalDate checkin, LocalDate checkout, Integer adults, String guestNationality, String currency, String children, String sessionId, String travelerId) throws ApiException {
        okhttp3.Call localVarCall = getHotelRatesValidateBeforeCall(hotelIds, checkin, checkout, adults, guestNationality, currency, children, sessionId, travelerId, null);
        Type localVarReturnType = new TypeToken<GetHotelRatesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Hotel full rate availability (asynchronously)
     * This endpoint allows you to send a hotel ID with a specific date range and in response receive all the rooms, rates that are available along with the cancelllation policies.
     * @param hotelIds hotel ids separated by comma, max number of hotel ids is 10, example (2345,557,56) (required)
     * @param checkin start date yyyy-mm-dd format (required)
     * @param checkout end date yyyy-mm-dd format (required)
     * @param adults adults number (required)
     * @param guestNationality guest nationality country code iso-2 example (US) (required)
     * @param currency currency code example (USD) (required)
     * @param children children ages separated by a comma (optional)
     * @param sessionId session id if retrieved from hotels search (optional)
     * @param travelerId traveler unique id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Credentials -  <br>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Expose-Headers -  <br>  * Access-Control-Max-Age -  <br>  * Content-Type -  <br>  * Date -  <br>  * Content-Length -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHotelRatesAsync(String hotelIds, LocalDate checkin, LocalDate checkout, Integer adults, String guestNationality, String currency, String children, String sessionId, String travelerId, final ApiCallback<GetHotelRatesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHotelRatesValidateBeforeCall(hotelIds, checkin, checkout, adults, guestNationality, currency, children, sessionId, travelerId, _callback);
        Type localVarReturnType = new TypeToken<GetHotelRatesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHotels
     * @param hotelIds hotel ids separated by comma, max number of hotel ids is 10, example (2345,557,56) (required)
     * @param checkin  (required)
     * @param checkout  (required)
     * @param country  (required)
     * @param adults  (required)
     * @param currency  (required)
     * @param guestNationality  (required)
     * @param latitude  (optional)
     * @param longitude  (optional)
     * @param distance  (optional)
     * @param children  (optional)
     * @param travelerId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Credentials -  <br>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Expose-Headers -  <br>  * Access-Control-Max-Age -  <br>  * Content-Type -  <br>  * Date -  <br>  * Content-Length -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHotelsCall(String hotelIds, LocalDate checkin, LocalDate checkout, String country, Integer adults, String currency, String guestNationality, BigDecimal latitude, BigDecimal longitude, Integer distance, String children, String travelerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hotels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hotelIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hotelIds", hotelIds));
        }

        if (checkin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkin", checkin));
        }

        if (checkout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkout", checkout));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (distance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("distance", distance));
        }

        if (adults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("adults", adults));
        }

        if (children != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("children", children));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (guestNationality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("guestNationality", guestNationality));
        }

        if (travelerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("travelerId", travelerId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHotelsValidateBeforeCall(String hotelIds, LocalDate checkin, LocalDate checkout, String country, Integer adults, String currency, String guestNationality, BigDecimal latitude, BigDecimal longitude, Integer distance, String children, String travelerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hotelIds' is set
        if (hotelIds == null) {
            throw new ApiException("Missing the required parameter 'hotelIds' when calling getHotels(Async)");
        }

        // verify the required parameter 'checkin' is set
        if (checkin == null) {
            throw new ApiException("Missing the required parameter 'checkin' when calling getHotels(Async)");
        }

        // verify the required parameter 'checkout' is set
        if (checkout == null) {
            throw new ApiException("Missing the required parameter 'checkout' when calling getHotels(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling getHotels(Async)");
        }

        // verify the required parameter 'adults' is set
        if (adults == null) {
            throw new ApiException("Missing the required parameter 'adults' when calling getHotels(Async)");
        }

        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling getHotels(Async)");
        }

        // verify the required parameter 'guestNationality' is set
        if (guestNationality == null) {
            throw new ApiException("Missing the required parameter 'guestNationality' when calling getHotels(Async)");
        }

        return getHotelsCall(hotelIds, checkin, checkout, country, adults, currency, guestNationality, latitude, longitude, distance, children, travelerId, _callback);

    }

    /**
     * Hotel minimum rate availability
     * This endpoint allows you to send a list of hotel ID&#39;s for a specific date range and in response receive the best rate available for each of the hotel ID&#39;s. The limit is set to 200 hotels
     * @param hotelIds hotel ids separated by comma, max number of hotel ids is 10, example (2345,557,56) (required)
     * @param checkin  (required)
     * @param checkout  (required)
     * @param country  (required)
     * @param adults  (required)
     * @param currency  (required)
     * @param guestNationality  (required)
     * @param latitude  (optional)
     * @param longitude  (optional)
     * @param distance  (optional)
     * @param children  (optional)
     * @param travelerId  (optional)
     * @return GetHotelsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Credentials -  <br>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Expose-Headers -  <br>  * Access-Control-Max-Age -  <br>  * Content-Type -  <br>  * Date -  <br>  * Content-Length -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public GetHotelsResponse getHotels(String hotelIds, LocalDate checkin, LocalDate checkout, String country, Integer adults, String currency, String guestNationality, BigDecimal latitude, BigDecimal longitude, Integer distance, String children, String travelerId) throws ApiException {
        ApiResponse<GetHotelsResponse> localVarResp = getHotelsWithHttpInfo(hotelIds, checkin, checkout, country, adults, currency, guestNationality, latitude, longitude, distance, children, travelerId);
        return localVarResp.getData();
    }

    /**
     * Hotel minimum rate availability
     * This endpoint allows you to send a list of hotel ID&#39;s for a specific date range and in response receive the best rate available for each of the hotel ID&#39;s. The limit is set to 200 hotels
     * @param hotelIds hotel ids separated by comma, max number of hotel ids is 10, example (2345,557,56) (required)
     * @param checkin  (required)
     * @param checkout  (required)
     * @param country  (required)
     * @param adults  (required)
     * @param currency  (required)
     * @param guestNationality  (required)
     * @param latitude  (optional)
     * @param longitude  (optional)
     * @param distance  (optional)
     * @param children  (optional)
     * @param travelerId  (optional)
     * @return ApiResponse&lt;GetHotelsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Credentials -  <br>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Expose-Headers -  <br>  * Access-Control-Max-Age -  <br>  * Content-Type -  <br>  * Date -  <br>  * Content-Length -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetHotelsResponse> getHotelsWithHttpInfo(String hotelIds, LocalDate checkin, LocalDate checkout, String country, Integer adults, String currency, String guestNationality, BigDecimal latitude, BigDecimal longitude, Integer distance, String children, String travelerId) throws ApiException {
        okhttp3.Call localVarCall = getHotelsValidateBeforeCall(hotelIds, checkin, checkout, country, adults, currency, guestNationality, latitude, longitude, distance, children, travelerId, null);
        Type localVarReturnType = new TypeToken<GetHotelsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Hotel minimum rate availability (asynchronously)
     * This endpoint allows you to send a list of hotel ID&#39;s for a specific date range and in response receive the best rate available for each of the hotel ID&#39;s. The limit is set to 200 hotels
     * @param hotelIds hotel ids separated by comma, max number of hotel ids is 10, example (2345,557,56) (required)
     * @param checkin  (required)
     * @param checkout  (required)
     * @param country  (required)
     * @param adults  (required)
     * @param currency  (required)
     * @param guestNationality  (required)
     * @param latitude  (optional)
     * @param longitude  (optional)
     * @param distance  (optional)
     * @param children  (optional)
     * @param travelerId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Credentials -  <br>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Expose-Headers -  <br>  * Access-Control-Max-Age -  <br>  * Content-Type -  <br>  * Date -  <br>  * Content-Length -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHotelsAsync(String hotelIds, LocalDate checkin, LocalDate checkout, String country, Integer adults, String currency, String guestNationality, BigDecimal latitude, BigDecimal longitude, Integer distance, String children, String travelerId, final ApiCallback<GetHotelsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHotelsValidateBeforeCall(hotelIds, checkin, checkout, country, adults, currency, guestNationality, latitude, longitude, distance, children, travelerId, _callback);
        Type localVarReturnType = new TypeToken<GetHotelsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

/**
 * Lite API
 * lite api hotel booking api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * https://konfigthis.com
 * Do not edit the class manually.
 */

package com.konfigthis.nuitee.client.api;

import com.konfigthis.nuitee.client.ApiInvoker;
import com.konfigthis.nuitee.client.ApiException;
import com.konfigthis.nuitee.client.Pair;

import com.konfigthis.nuitee.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import java.math.BigDecimal;
import java.util.Date;
import com.konfigthis.nuitee.client.model.GetHotelRates400Response;
import com.konfigthis.nuitee.client.model.GetHotelRates401Response;
import com.konfigthis.nuitee.client.model.GetHotelRatesResponse;
import com.konfigthis.nuitee.client.model.GetHotels400Response;
import com.konfigthis.nuitee.client.model.GetHotels401Response;
import com.konfigthis.nuitee.client.model.GetHotelsResponse;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class SearchApi {
  String basePath = "https://api.nlite.ml/v1.0";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Hotel full rate availability
  * This endpoint allows you to send a hotel ID with a specific date range and in response receive all the rooms, rates that are available along with the cancelllation policies.
   * @param hotelIds hotel ids separated by comma, max number of hotel ids is 10, example (2345,557,56)
   * @param checkin start date yyyy-mm-dd format
   * @param checkout end date yyyy-mm-dd format
   * @param adults adults number
   * @param guestNationality guest nationality country code iso-2 example (US)
   * @param currency currency code example (USD)
   * @param children children ages separated by a comma
   * @param sessionId session id if retrieved from hotels search
   * @param travelerId traveler unique id
   * @return GetHotelRatesResponse
  */
  public GetHotelRatesResponse getHotelRates (String hotelIds, Date checkin, Date checkout, Integer adults, String guestNationality, String currency, String children, String sessionId, String travelerId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'hotelIds' is set
    if (hotelIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'hotelIds' when calling getHotelRates",
        new ApiException(400, "Missing the required parameter 'hotelIds' when calling getHotelRates"));
    }
    // verify the required parameter 'checkin' is set
    if (checkin == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'checkin' when calling getHotelRates",
        new ApiException(400, "Missing the required parameter 'checkin' when calling getHotelRates"));
    }
    // verify the required parameter 'checkout' is set
    if (checkout == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'checkout' when calling getHotelRates",
        new ApiException(400, "Missing the required parameter 'checkout' when calling getHotelRates"));
    }
    // verify the required parameter 'adults' is set
    if (adults == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adults' when calling getHotelRates",
        new ApiException(400, "Missing the required parameter 'adults' when calling getHotelRates"));
    }
    // verify the required parameter 'guestNationality' is set
    if (guestNationality == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'guestNationality' when calling getHotelRates",
        new ApiException(400, "Missing the required parameter 'guestNationality' when calling getHotelRates"));
    }
    // verify the required parameter 'currency' is set
    if (currency == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'currency' when calling getHotelRates",
        new ApiException(400, "Missing the required parameter 'currency' when calling getHotelRates"));
    }

    // create path and map variables
    String path = "/hotels/rates";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "hotelIds", hotelIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "checkin", checkin));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "checkout", checkout));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "adults", adults));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "children", children));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "guestNationality", guestNationality));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "currency", currency));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sessionId", sessionId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "travelerId", travelerId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetHotelRatesResponse) ApiInvoker.deserialize(localVarResponse, "", GetHotelRatesResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Hotel full rate availability
   * This endpoint allows you to send a hotel ID with a specific date range and in response receive all the rooms, rates that are available along with the cancelllation policies.
   * @param hotelIds hotel ids separated by comma, max number of hotel ids is 10, example (2345,557,56)   * @param checkin start date yyyy-mm-dd format   * @param checkout end date yyyy-mm-dd format   * @param adults adults number   * @param guestNationality guest nationality country code iso-2 example (US)   * @param currency currency code example (USD)   * @param children children ages separated by a comma   * @param sessionId session id if retrieved from hotels search   * @param travelerId traveler unique id
  */
  public void getHotelRates (String hotelIds, Date checkin, Date checkout, Integer adults, String guestNationality, String currency, String children, String sessionId, String travelerId, final Response.Listener<GetHotelRatesResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'hotelIds' is set
    if (hotelIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'hotelIds' when calling getHotelRates",
        new ApiException(400, "Missing the required parameter 'hotelIds' when calling getHotelRates"));
    }
    // verify the required parameter 'checkin' is set
    if (checkin == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'checkin' when calling getHotelRates",
        new ApiException(400, "Missing the required parameter 'checkin' when calling getHotelRates"));
    }
    // verify the required parameter 'checkout' is set
    if (checkout == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'checkout' when calling getHotelRates",
        new ApiException(400, "Missing the required parameter 'checkout' when calling getHotelRates"));
    }
    // verify the required parameter 'adults' is set
    if (adults == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adults' when calling getHotelRates",
        new ApiException(400, "Missing the required parameter 'adults' when calling getHotelRates"));
    }
    // verify the required parameter 'guestNationality' is set
    if (guestNationality == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'guestNationality' when calling getHotelRates",
        new ApiException(400, "Missing the required parameter 'guestNationality' when calling getHotelRates"));
    }
    // verify the required parameter 'currency' is set
    if (currency == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'currency' when calling getHotelRates",
        new ApiException(400, "Missing the required parameter 'currency' when calling getHotelRates"));
    }

    // create path and map variables
    String path = "/hotels/rates".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "hotelIds", hotelIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "checkin", checkin));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "checkout", checkout));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "adults", adults));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "children", children));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "guestNationality", guestNationality));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "currency", currency));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sessionId", sessionId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "travelerId", travelerId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetHotelRatesResponse) ApiInvoker.deserialize(localVarResponse,  "", GetHotelRatesResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Hotel minimum rate availability
  * This endpoint allows you to send a list of hotel ID&#39;s for a specific date range and in response receive the best rate available for each of the hotel ID&#39;s. The limit is set to 200 hotels
   * @param hotelIds hotel ids separated by comma, max number of hotel ids is 10, example (2345,557,56)
   * @param checkin 
   * @param checkout 
   * @param country 
   * @param adults 
   * @param currency 
   * @param guestNationality 
   * @param latitude 
   * @param longitude 
   * @param distance 
   * @param children 
   * @param travelerId 
   * @return GetHotelsResponse
  */
  public GetHotelsResponse getHotels (String hotelIds, Date checkin, Date checkout, String country, Integer adults, String currency, String guestNationality, BigDecimal latitude, BigDecimal longitude, Integer distance, String children, String travelerId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'hotelIds' is set
    if (hotelIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'hotelIds' when calling getHotels",
        new ApiException(400, "Missing the required parameter 'hotelIds' when calling getHotels"));
    }
    // verify the required parameter 'checkin' is set
    if (checkin == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'checkin' when calling getHotels",
        new ApiException(400, "Missing the required parameter 'checkin' when calling getHotels"));
    }
    // verify the required parameter 'checkout' is set
    if (checkout == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'checkout' when calling getHotels",
        new ApiException(400, "Missing the required parameter 'checkout' when calling getHotels"));
    }
    // verify the required parameter 'country' is set
    if (country == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'country' when calling getHotels",
        new ApiException(400, "Missing the required parameter 'country' when calling getHotels"));
    }
    // verify the required parameter 'adults' is set
    if (adults == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adults' when calling getHotels",
        new ApiException(400, "Missing the required parameter 'adults' when calling getHotels"));
    }
    // verify the required parameter 'currency' is set
    if (currency == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'currency' when calling getHotels",
        new ApiException(400, "Missing the required parameter 'currency' when calling getHotels"));
    }
    // verify the required parameter 'guestNationality' is set
    if (guestNationality == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'guestNationality' when calling getHotels",
        new ApiException(400, "Missing the required parameter 'guestNationality' when calling getHotels"));
    }

    // create path and map variables
    String path = "/hotels";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "hotelIds", hotelIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "checkin", checkin));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "checkout", checkout));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "country", country));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "latitude", latitude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "longitude", longitude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "distance", distance));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "adults", adults));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "children", children));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "currency", currency));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "guestNationality", guestNationality));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "travelerId", travelerId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetHotelsResponse) ApiInvoker.deserialize(localVarResponse, "", GetHotelsResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Hotel minimum rate availability
   * This endpoint allows you to send a list of hotel ID&#39;s for a specific date range and in response receive the best rate available for each of the hotel ID&#39;s. The limit is set to 200 hotels
   * @param hotelIds hotel ids separated by comma, max number of hotel ids is 10, example (2345,557,56)   * @param checkin    * @param checkout    * @param country    * @param adults    * @param currency    * @param guestNationality    * @param latitude    * @param longitude    * @param distance    * @param children    * @param travelerId 
  */
  public void getHotels (String hotelIds, Date checkin, Date checkout, String country, Integer adults, String currency, String guestNationality, BigDecimal latitude, BigDecimal longitude, Integer distance, String children, String travelerId, final Response.Listener<GetHotelsResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'hotelIds' is set
    if (hotelIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'hotelIds' when calling getHotels",
        new ApiException(400, "Missing the required parameter 'hotelIds' when calling getHotels"));
    }
    // verify the required parameter 'checkin' is set
    if (checkin == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'checkin' when calling getHotels",
        new ApiException(400, "Missing the required parameter 'checkin' when calling getHotels"));
    }
    // verify the required parameter 'checkout' is set
    if (checkout == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'checkout' when calling getHotels",
        new ApiException(400, "Missing the required parameter 'checkout' when calling getHotels"));
    }
    // verify the required parameter 'country' is set
    if (country == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'country' when calling getHotels",
        new ApiException(400, "Missing the required parameter 'country' when calling getHotels"));
    }
    // verify the required parameter 'adults' is set
    if (adults == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adults' when calling getHotels",
        new ApiException(400, "Missing the required parameter 'adults' when calling getHotels"));
    }
    // verify the required parameter 'currency' is set
    if (currency == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'currency' when calling getHotels",
        new ApiException(400, "Missing the required parameter 'currency' when calling getHotels"));
    }
    // verify the required parameter 'guestNationality' is set
    if (guestNationality == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'guestNationality' when calling getHotels",
        new ApiException(400, "Missing the required parameter 'guestNationality' when calling getHotels"));
    }

    // create path and map variables
    String path = "/hotels".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "hotelIds", hotelIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "checkin", checkin));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "checkout", checkout));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "country", country));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "latitude", latitude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "longitude", longitude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "distance", distance));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "adults", adults));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "children", children));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "currency", currency));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "guestNationality", guestNationality));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "travelerId", travelerId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetHotelsResponse) ApiInvoker.deserialize(localVarResponse,  "", GetHotelsResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}

<?php
/**
 * RetrieveResponseData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nuitee
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * Lite API
 *
 * lite api hotel booking api
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Nuitee\Model;

use \ArrayAccess;
use \Nuitee\ObjectSerializer;

/**
 * RetrieveResponseData Class Doc Comment
 *
 * @category Class
 * @package  Nuitee
 * @implements \ArrayAccess<string, mixed>
 */
class RetrieveResponseData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RetrieveResponse_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'booking_id' => 'string',
        'status' => 'string',
        'hotel_confirmation_code' => 'string',
        'checkin' => 'string',
        'checkout' => 'string',
        'booked_rooms' => '\Nuitee\Model\RetrieveResponseDataBookedRoomsInner[]',
        'guest_info' => '\Nuitee\Model\RetrieveResponseDataGuestInfo',
        'created_at' => 'string',
        'cancellation_policies' => '\Nuitee\Model\RetrieveResponseDataCancellationPolicies'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'booking_id' => null,
        'status' => null,
        'hotel_confirmation_code' => null,
        'checkin' => null,
        'checkout' => null,
        'booked_rooms' => null,
        'guest_info' => null,
        'created_at' => null,
        'cancellation_policies' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'booking_id' => false,
		'status' => false,
		'hotel_confirmation_code' => false,
		'checkin' => false,
		'checkout' => false,
		'booked_rooms' => false,
		'guest_info' => false,
		'created_at' => false,
		'cancellation_policies' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'booking_id' => 'bookingId',
        'status' => 'status',
        'hotel_confirmation_code' => 'hotelConfirmationCode',
        'checkin' => 'checkin',
        'checkout' => 'checkout',
        'booked_rooms' => 'bookedRooms',
        'guest_info' => 'guestInfo',
        'created_at' => 'createdAt',
        'cancellation_policies' => 'cancellationPolicies'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'booking_id' => 'setBookingId',
        'status' => 'setStatus',
        'hotel_confirmation_code' => 'setHotelConfirmationCode',
        'checkin' => 'setCheckin',
        'checkout' => 'setCheckout',
        'booked_rooms' => 'setBookedRooms',
        'guest_info' => 'setGuestInfo',
        'created_at' => 'setCreatedAt',
        'cancellation_policies' => 'setCancellationPolicies'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'booking_id' => 'getBookingId',
        'status' => 'getStatus',
        'hotel_confirmation_code' => 'getHotelConfirmationCode',
        'checkin' => 'getCheckin',
        'checkout' => 'getCheckout',
        'booked_rooms' => 'getBookedRooms',
        'guest_info' => 'getGuestInfo',
        'created_at' => 'getCreatedAt',
        'cancellation_policies' => 'getCancellationPolicies'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('booking_id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('hotel_confirmation_code', $data ?? [], null);
        $this->setIfExists('checkin', $data ?? [], null);
        $this->setIfExists('checkout', $data ?? [], null);
        $this->setIfExists('booked_rooms', $data ?? [], null);
        $this->setIfExists('guest_info', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('cancellation_policies', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets booking_id
     *
     * @return string|null
     */
    public function getBookingId()
    {
        return $this->container['booking_id'];
    }

    /**
     * Sets booking_id
     *
     * @param string|null $booking_id booking_id
     *
     * @return self
     */
    public function setBookingId($booking_id)
    {

        if (is_null($booking_id)) {
            throw new \InvalidArgumentException('non-nullable booking_id cannot be null');
        }

        $this->container['booking_id'] = $booking_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {

        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets hotel_confirmation_code
     *
     * @return string|null
     */
    public function getHotelConfirmationCode()
    {
        return $this->container['hotel_confirmation_code'];
    }

    /**
     * Sets hotel_confirmation_code
     *
     * @param string|null $hotel_confirmation_code hotel_confirmation_code
     *
     * @return self
     */
    public function setHotelConfirmationCode($hotel_confirmation_code)
    {

        if (is_null($hotel_confirmation_code)) {
            throw new \InvalidArgumentException('non-nullable hotel_confirmation_code cannot be null');
        }

        $this->container['hotel_confirmation_code'] = $hotel_confirmation_code;

        return $this;
    }

    /**
     * Gets checkin
     *
     * @return string|null
     */
    public function getCheckin()
    {
        return $this->container['checkin'];
    }

    /**
     * Sets checkin
     *
     * @param string|null $checkin checkin
     *
     * @return self
     */
    public function setCheckin($checkin)
    {

        if (is_null($checkin)) {
            throw new \InvalidArgumentException('non-nullable checkin cannot be null');
        }

        $this->container['checkin'] = $checkin;

        return $this;
    }

    /**
     * Gets checkout
     *
     * @return string|null
     */
    public function getCheckout()
    {
        return $this->container['checkout'];
    }

    /**
     * Sets checkout
     *
     * @param string|null $checkout checkout
     *
     * @return self
     */
    public function setCheckout($checkout)
    {

        if (is_null($checkout)) {
            throw new \InvalidArgumentException('non-nullable checkout cannot be null');
        }

        $this->container['checkout'] = $checkout;

        return $this;
    }

    /**
     * Gets booked_rooms
     *
     * @return \Nuitee\Model\RetrieveResponseDataBookedRoomsInner[]|null
     */
    public function getBookedRooms()
    {
        return $this->container['booked_rooms'];
    }

    /**
     * Sets booked_rooms
     *
     * @param \Nuitee\Model\RetrieveResponseDataBookedRoomsInner[]|null $booked_rooms booked_rooms
     *
     * @return self
     */
    public function setBookedRooms($booked_rooms)
    {

        if (is_null($booked_rooms)) {
            throw new \InvalidArgumentException('non-nullable booked_rooms cannot be null');
        }

        $this->container['booked_rooms'] = $booked_rooms;

        return $this;
    }

    /**
     * Gets guest_info
     *
     * @return \Nuitee\Model\RetrieveResponseDataGuestInfo|null
     */
    public function getGuestInfo()
    {
        return $this->container['guest_info'];
    }

    /**
     * Sets guest_info
     *
     * @param \Nuitee\Model\RetrieveResponseDataGuestInfo|null $guest_info guest_info
     *
     * @return self
     */
    public function setGuestInfo($guest_info)
    {

        if (is_null($guest_info)) {
            throw new \InvalidArgumentException('non-nullable guest_info cannot be null');
        }

        $this->container['guest_info'] = $guest_info;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {

        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }

        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets cancellation_policies
     *
     * @return \Nuitee\Model\RetrieveResponseDataCancellationPolicies|null
     */
    public function getCancellationPolicies()
    {
        return $this->container['cancellation_policies'];
    }

    /**
     * Sets cancellation_policies
     *
     * @param \Nuitee\Model\RetrieveResponseDataCancellationPolicies|null $cancellation_policies cancellation_policies
     *
     * @return self
     */
    public function setCancellationPolicies($cancellation_policies)
    {

        if (is_null($cancellation_policies)) {
            throw new \InvalidArgumentException('non-nullable cancellation_policies cannot be null');
        }

        $this->container['cancellation_policies'] = $cancellation_policies;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



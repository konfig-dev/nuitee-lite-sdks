/*
Lite API

lite api hotel booking api

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package nuitee

import (
	"encoding/json"
)

// ListCurrenciesResponseDataInner struct for ListCurrenciesResponseDataInner
type ListCurrenciesResponseDataInner struct {
	Code *string `json:"code,omitempty"`
	Number *string `json:"number,omitempty"`
	Digits *int32 `json:"digits,omitempty"`
	Currency *string `json:"currency,omitempty"`
	Countries []string `json:"countries,omitempty"`
}

// NewListCurrenciesResponseDataInner instantiates a new ListCurrenciesResponseDataInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListCurrenciesResponseDataInner() *ListCurrenciesResponseDataInner {
	this := ListCurrenciesResponseDataInner{}
	return &this
}

// NewListCurrenciesResponseDataInnerWithDefaults instantiates a new ListCurrenciesResponseDataInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListCurrenciesResponseDataInnerWithDefaults() *ListCurrenciesResponseDataInner {
	this := ListCurrenciesResponseDataInner{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ListCurrenciesResponseDataInner) GetCode() string {
	if o == nil || isNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListCurrenciesResponseDataInner) GetCodeOk() (*string, bool) {
	if o == nil || isNil(o.Code) {
    return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ListCurrenciesResponseDataInner) HasCode() bool {
	if o != nil && !isNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ListCurrenciesResponseDataInner) SetCode(v string) {
	o.Code = &v
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *ListCurrenciesResponseDataInner) GetNumber() string {
	if o == nil || isNil(o.Number) {
		var ret string
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListCurrenciesResponseDataInner) GetNumberOk() (*string, bool) {
	if o == nil || isNil(o.Number) {
    return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *ListCurrenciesResponseDataInner) HasNumber() bool {
	if o != nil && !isNil(o.Number) {
		return true
	}

	return false
}

// SetNumber gets a reference to the given string and assigns it to the Number field.
func (o *ListCurrenciesResponseDataInner) SetNumber(v string) {
	o.Number = &v
}

// GetDigits returns the Digits field value if set, zero value otherwise.
func (o *ListCurrenciesResponseDataInner) GetDigits() int32 {
	if o == nil || isNil(o.Digits) {
		var ret int32
		return ret
	}
	return *o.Digits
}

// GetDigitsOk returns a tuple with the Digits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListCurrenciesResponseDataInner) GetDigitsOk() (*int32, bool) {
	if o == nil || isNil(o.Digits) {
    return nil, false
	}
	return o.Digits, true
}

// HasDigits returns a boolean if a field has been set.
func (o *ListCurrenciesResponseDataInner) HasDigits() bool {
	if o != nil && !isNil(o.Digits) {
		return true
	}

	return false
}

// SetDigits gets a reference to the given int32 and assigns it to the Digits field.
func (o *ListCurrenciesResponseDataInner) SetDigits(v int32) {
	o.Digits = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *ListCurrenciesResponseDataInner) GetCurrency() string {
	if o == nil || isNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListCurrenciesResponseDataInner) GetCurrencyOk() (*string, bool) {
	if o == nil || isNil(o.Currency) {
    return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *ListCurrenciesResponseDataInner) HasCurrency() bool {
	if o != nil && !isNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *ListCurrenciesResponseDataInner) SetCurrency(v string) {
	o.Currency = &v
}

// GetCountries returns the Countries field value if set, zero value otherwise.
func (o *ListCurrenciesResponseDataInner) GetCountries() []string {
	if o == nil || isNil(o.Countries) {
		var ret []string
		return ret
	}
	return o.Countries
}

// GetCountriesOk returns a tuple with the Countries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListCurrenciesResponseDataInner) GetCountriesOk() ([]string, bool) {
	if o == nil || isNil(o.Countries) {
    return nil, false
	}
	return o.Countries, true
}

// HasCountries returns a boolean if a field has been set.
func (o *ListCurrenciesResponseDataInner) HasCountries() bool {
	if o != nil && !isNil(o.Countries) {
		return true
	}

	return false
}

// SetCountries gets a reference to the given []string and assigns it to the Countries field.
func (o *ListCurrenciesResponseDataInner) SetCountries(v []string) {
	o.Countries = v
}

func (o ListCurrenciesResponseDataInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !isNil(o.Number) {
		toSerialize["number"] = o.Number
	}
	if !isNil(o.Digits) {
		toSerialize["digits"] = o.Digits
	}
	if !isNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !isNil(o.Countries) {
		toSerialize["countries"] = o.Countries
	}
	return json.Marshal(toSerialize)
}

type NullableListCurrenciesResponseDataInner struct {
	value *ListCurrenciesResponseDataInner
	isSet bool
}

func (v NullableListCurrenciesResponseDataInner) Get() *ListCurrenciesResponseDataInner {
	return v.value
}

func (v *NullableListCurrenciesResponseDataInner) Set(val *ListCurrenciesResponseDataInner) {
	v.value = val
	v.isSet = true
}

func (v NullableListCurrenciesResponseDataInner) IsSet() bool {
	return v.isSet
}

func (v *NullableListCurrenciesResponseDataInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListCurrenciesResponseDataInner(val *ListCurrenciesResponseDataInner) *NullableListCurrenciesResponseDataInner {
	return &NullableListCurrenciesResponseDataInner{value: val, isSet: true}
}

func (v NullableListCurrenciesResponseDataInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListCurrenciesResponseDataInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Lite API

lite api hotel booking api

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package nuitee

import (
	"encoding/json"
)

// RetrieveResponse struct for RetrieveResponse
type RetrieveResponse struct {
	Data *RetrieveResponseData `json:"data,omitempty"`
}

// NewRetrieveResponse instantiates a new RetrieveResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRetrieveResponse() *RetrieveResponse {
	this := RetrieveResponse{}
	return &this
}

// NewRetrieveResponseWithDefaults instantiates a new RetrieveResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRetrieveResponseWithDefaults() *RetrieveResponse {
	this := RetrieveResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *RetrieveResponse) GetData() RetrieveResponseData {
	if o == nil || isNil(o.Data) {
		var ret RetrieveResponseData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetrieveResponse) GetDataOk() (*RetrieveResponseData, bool) {
	if o == nil || isNil(o.Data) {
    return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *RetrieveResponse) HasData() bool {
	if o != nil && !isNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given RetrieveResponseData and assigns it to the Data field.
func (o *RetrieveResponse) SetData(v RetrieveResponseData) {
	o.Data = &v
}

func (o RetrieveResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableRetrieveResponse struct {
	value *RetrieveResponse
	isSet bool
}

func (v NullableRetrieveResponse) Get() *RetrieveResponse {
	return v.value
}

func (v *NullableRetrieveResponse) Set(val *RetrieveResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRetrieveResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRetrieveResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRetrieveResponse(val *RetrieveResponse) *NullableRetrieveResponse {
	return &NullableRetrieveResponse{value: val, isSet: true}
}

func (v NullableRetrieveResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRetrieveResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



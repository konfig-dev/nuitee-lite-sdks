/*
Lite API

lite api hotel booking api

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package nuitee

import (
	"encoding/json"
)

// ListCurrenciesResponse struct for ListCurrenciesResponse
type ListCurrenciesResponse struct {
	Data []ListCurrenciesResponseDataInner `json:"data,omitempty"`
}

// NewListCurrenciesResponse instantiates a new ListCurrenciesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListCurrenciesResponse() *ListCurrenciesResponse {
	this := ListCurrenciesResponse{}
	return &this
}

// NewListCurrenciesResponseWithDefaults instantiates a new ListCurrenciesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListCurrenciesResponseWithDefaults() *ListCurrenciesResponse {
	this := ListCurrenciesResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ListCurrenciesResponse) GetData() []ListCurrenciesResponseDataInner {
	if o == nil || isNil(o.Data) {
		var ret []ListCurrenciesResponseDataInner
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListCurrenciesResponse) GetDataOk() ([]ListCurrenciesResponseDataInner, bool) {
	if o == nil || isNil(o.Data) {
    return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ListCurrenciesResponse) HasData() bool {
	if o != nil && !isNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []ListCurrenciesResponseDataInner and assigns it to the Data field.
func (o *ListCurrenciesResponse) SetData(v []ListCurrenciesResponseDataInner) {
	o.Data = v
}

func (o ListCurrenciesResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableListCurrenciesResponse struct {
	value *ListCurrenciesResponse
	isSet bool
}

func (v NullableListCurrenciesResponse) Get() *ListCurrenciesResponse {
	return v.value
}

func (v *NullableListCurrenciesResponse) Set(val *ListCurrenciesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListCurrenciesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListCurrenciesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListCurrenciesResponse(val *ListCurrenciesResponse) *NullableListCurrenciesResponse {
	return &NullableListCurrenciesResponse{value: val, isSet: true}
}

func (v NullableListCurrenciesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListCurrenciesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Lite API

lite api hotel booking api

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package nuitee

import (
	"encoding/json"
)

// ListHotelsResponse struct for ListHotelsResponse
type ListHotelsResponse struct {
	Data []ListHotelsResponseDataInner `json:"data,omitempty"`
	Total *int32 `json:"total,omitempty"`
}

// NewListHotelsResponse instantiates a new ListHotelsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListHotelsResponse() *ListHotelsResponse {
	this := ListHotelsResponse{}
	return &this
}

// NewListHotelsResponseWithDefaults instantiates a new ListHotelsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListHotelsResponseWithDefaults() *ListHotelsResponse {
	this := ListHotelsResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ListHotelsResponse) GetData() []ListHotelsResponseDataInner {
	if o == nil || isNil(o.Data) {
		var ret []ListHotelsResponseDataInner
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListHotelsResponse) GetDataOk() ([]ListHotelsResponseDataInner, bool) {
	if o == nil || isNil(o.Data) {
    return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ListHotelsResponse) HasData() bool {
	if o != nil && !isNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []ListHotelsResponseDataInner and assigns it to the Data field.
func (o *ListHotelsResponse) SetData(v []ListHotelsResponseDataInner) {
	o.Data = v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *ListHotelsResponse) GetTotal() int32 {
	if o == nil || isNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListHotelsResponse) GetTotalOk() (*int32, bool) {
	if o == nil || isNil(o.Total) {
    return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *ListHotelsResponse) HasTotal() bool {
	if o != nil && !isNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *ListHotelsResponse) SetTotal(v int32) {
	o.Total = &v
}

func (o ListHotelsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !isNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	return json.Marshal(toSerialize)
}

type NullableListHotelsResponse struct {
	value *ListHotelsResponse
	isSet bool
}

func (v NullableListHotelsResponse) Get() *ListHotelsResponse {
	return v.value
}

func (v *NullableListHotelsResponse) Set(val *ListHotelsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListHotelsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListHotelsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListHotelsResponse(val *ListHotelsResponse) *NullableListHotelsResponse {
	return &NullableListHotelsResponse{value: val, isSet: true}
}

func (v NullableListHotelsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListHotelsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



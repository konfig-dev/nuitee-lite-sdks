/*
Lite API

lite api hotel booking api

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package nuitee

import (
	"encoding/json"
)

// CancelResponse struct for CancelResponse
type CancelResponse struct {
	BookingId *string `json:"bookingId,omitempty"`
	CancellationFee *int32 `json:"cancellation_fee,omitempty"`
	Currency *string `json:"currency,omitempty"`
	RefundAmount *float32 `json:"refund_amount,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewCancelResponse instantiates a new CancelResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancelResponse() *CancelResponse {
	this := CancelResponse{}
	return &this
}

// NewCancelResponseWithDefaults instantiates a new CancelResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancelResponseWithDefaults() *CancelResponse {
	this := CancelResponse{}
	return &this
}

// GetBookingId returns the BookingId field value if set, zero value otherwise.
func (o *CancelResponse) GetBookingId() string {
	if o == nil || isNil(o.BookingId) {
		var ret string
		return ret
	}
	return *o.BookingId
}

// GetBookingIdOk returns a tuple with the BookingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelResponse) GetBookingIdOk() (*string, bool) {
	if o == nil || isNil(o.BookingId) {
    return nil, false
	}
	return o.BookingId, true
}

// HasBookingId returns a boolean if a field has been set.
func (o *CancelResponse) HasBookingId() bool {
	if o != nil && !isNil(o.BookingId) {
		return true
	}

	return false
}

// SetBookingId gets a reference to the given string and assigns it to the BookingId field.
func (o *CancelResponse) SetBookingId(v string) {
	o.BookingId = &v
}

// GetCancellationFee returns the CancellationFee field value if set, zero value otherwise.
func (o *CancelResponse) GetCancellationFee() int32 {
	if o == nil || isNil(o.CancellationFee) {
		var ret int32
		return ret
	}
	return *o.CancellationFee
}

// GetCancellationFeeOk returns a tuple with the CancellationFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelResponse) GetCancellationFeeOk() (*int32, bool) {
	if o == nil || isNil(o.CancellationFee) {
    return nil, false
	}
	return o.CancellationFee, true
}

// HasCancellationFee returns a boolean if a field has been set.
func (o *CancelResponse) HasCancellationFee() bool {
	if o != nil && !isNil(o.CancellationFee) {
		return true
	}

	return false
}

// SetCancellationFee gets a reference to the given int32 and assigns it to the CancellationFee field.
func (o *CancelResponse) SetCancellationFee(v int32) {
	o.CancellationFee = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *CancelResponse) GetCurrency() string {
	if o == nil || isNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelResponse) GetCurrencyOk() (*string, bool) {
	if o == nil || isNil(o.Currency) {
    return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *CancelResponse) HasCurrency() bool {
	if o != nil && !isNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *CancelResponse) SetCurrency(v string) {
	o.Currency = &v
}

// GetRefundAmount returns the RefundAmount field value if set, zero value otherwise.
func (o *CancelResponse) GetRefundAmount() float32 {
	if o == nil || isNil(o.RefundAmount) {
		var ret float32
		return ret
	}
	return *o.RefundAmount
}

// GetRefundAmountOk returns a tuple with the RefundAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelResponse) GetRefundAmountOk() (*float32, bool) {
	if o == nil || isNil(o.RefundAmount) {
    return nil, false
	}
	return o.RefundAmount, true
}

// HasRefundAmount returns a boolean if a field has been set.
func (o *CancelResponse) HasRefundAmount() bool {
	if o != nil && !isNil(o.RefundAmount) {
		return true
	}

	return false
}

// SetRefundAmount gets a reference to the given float32 and assigns it to the RefundAmount field.
func (o *CancelResponse) SetRefundAmount(v float32) {
	o.RefundAmount = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CancelResponse) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelResponse) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CancelResponse) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *CancelResponse) SetStatus(v string) {
	o.Status = &v
}

func (o CancelResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.BookingId) {
		toSerialize["bookingId"] = o.BookingId
	}
	if !isNil(o.CancellationFee) {
		toSerialize["cancellation_fee"] = o.CancellationFee
	}
	if !isNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !isNil(o.RefundAmount) {
		toSerialize["refund_amount"] = o.RefundAmount
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableCancelResponse struct {
	value *CancelResponse
	isSet bool
}

func (v NullableCancelResponse) Get() *CancelResponse {
	return v.value
}

func (v *NullableCancelResponse) Set(val *CancelResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCancelResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCancelResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancelResponse(val *CancelResponse) *NullableCancelResponse {
	return &NullableCancelResponse{value: val, isSet: true}
}

func (v NullableCancelResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancelResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Lite API

lite api hotel booking api

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package nuitee

import (
	"encoding/json"
)

// ListBookingsResponse struct for ListBookingsResponse
type ListBookingsResponse struct {
	Data []ListBookingsResponseDataInner `json:"data,omitempty"`
}

// NewListBookingsResponse instantiates a new ListBookingsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListBookingsResponse() *ListBookingsResponse {
	this := ListBookingsResponse{}
	return &this
}

// NewListBookingsResponseWithDefaults instantiates a new ListBookingsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListBookingsResponseWithDefaults() *ListBookingsResponse {
	this := ListBookingsResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ListBookingsResponse) GetData() []ListBookingsResponseDataInner {
	if o == nil || isNil(o.Data) {
		var ret []ListBookingsResponseDataInner
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListBookingsResponse) GetDataOk() ([]ListBookingsResponseDataInner, bool) {
	if o == nil || isNil(o.Data) {
    return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ListBookingsResponse) HasData() bool {
	if o != nil && !isNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []ListBookingsResponseDataInner and assigns it to the Data field.
func (o *ListBookingsResponse) SetData(v []ListBookingsResponseDataInner) {
	o.Data = v
}

func (o ListBookingsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableListBookingsResponse struct {
	value *ListBookingsResponse
	isSet bool
}

func (v NullableListBookingsResponse) Get() *ListBookingsResponse {
	return v.value
}

func (v *NullableListBookingsResponse) Set(val *ListBookingsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListBookingsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListBookingsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListBookingsResponse(val *ListBookingsResponse) *NullableListBookingsResponse {
	return &NullableListBookingsResponse{value: val, isSet: true}
}

func (v NullableListBookingsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListBookingsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Lite API

lite api hotel booking api

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package nuitee

import (
	"encoding/json"
)

// ListCitiesResponse struct for ListCitiesResponse
type ListCitiesResponse struct {
	Data []ListCitiesResponseDataInner `json:"data,omitempty"`
}

// NewListCitiesResponse instantiates a new ListCitiesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListCitiesResponse() *ListCitiesResponse {
	this := ListCitiesResponse{}
	return &this
}

// NewListCitiesResponseWithDefaults instantiates a new ListCitiesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListCitiesResponseWithDefaults() *ListCitiesResponse {
	this := ListCitiesResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ListCitiesResponse) GetData() []ListCitiesResponseDataInner {
	if o == nil || isNil(o.Data) {
		var ret []ListCitiesResponseDataInner
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListCitiesResponse) GetDataOk() ([]ListCitiesResponseDataInner, bool) {
	if o == nil || isNil(o.Data) {
    return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ListCitiesResponse) HasData() bool {
	if o != nil && !isNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []ListCitiesResponseDataInner and assigns it to the Data field.
func (o *ListCitiesResponse) SetData(v []ListCitiesResponseDataInner) {
	o.Data = v
}

func (o ListCitiesResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableListCitiesResponse struct {
	value *ListCitiesResponse
	isSet bool
}

func (v NullableListCitiesResponse) Get() *ListCitiesResponse {
	return v.value
}

func (v *NullableListCitiesResponse) Set(val *ListCitiesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListCitiesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListCitiesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListCitiesResponse(val *ListCitiesResponse) *NullableListCitiesResponse {
	return &NullableListCitiesResponse{value: val, isSet: true}
}

func (v NullableListCitiesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListCitiesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



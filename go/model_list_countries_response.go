/*
Lite API

lite api hotel booking api

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package nuitee

import (
	"encoding/json"
)

// ListCountriesResponse struct for ListCountriesResponse
type ListCountriesResponse struct {
	Data []ListCountriesResponseDataInner `json:"data,omitempty"`
}

// NewListCountriesResponse instantiates a new ListCountriesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListCountriesResponse() *ListCountriesResponse {
	this := ListCountriesResponse{}
	return &this
}

// NewListCountriesResponseWithDefaults instantiates a new ListCountriesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListCountriesResponseWithDefaults() *ListCountriesResponse {
	this := ListCountriesResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ListCountriesResponse) GetData() []ListCountriesResponseDataInner {
	if o == nil || isNil(o.Data) {
		var ret []ListCountriesResponseDataInner
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListCountriesResponse) GetDataOk() ([]ListCountriesResponseDataInner, bool) {
	if o == nil || isNil(o.Data) {
    return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ListCountriesResponse) HasData() bool {
	if o != nil && !isNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []ListCountriesResponseDataInner and assigns it to the Data field.
func (o *ListCountriesResponse) SetData(v []ListCountriesResponseDataInner) {
	o.Data = v
}

func (o ListCountriesResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableListCountriesResponse struct {
	value *ListCountriesResponse
	isSet bool
}

func (v NullableListCountriesResponse) Get() *ListCountriesResponse {
	return v.value
}

func (v *NullableListCountriesResponse) Set(val *ListCountriesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListCountriesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListCountriesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListCountriesResponse(val *ListCountriesResponse) *NullableListCountriesResponse {
	return &NullableListCountriesResponse{value: val, isSet: true}
}

func (v NullableListCountriesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListCountriesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Lite API

lite api hotel booking api

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package nuitee

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// SearchApiService SearchApi service
type SearchApiService service

type SearchApiGetHotelRatesRequest struct {
	ctx context.Context
	ApiService *SearchApiService
	hotelIds *string
	checkin *string
	checkout *string
	adults *int32
	guestNationality *string
	currency *string
	children *string
	sessionId *string
	travelerId *string
}

// hotel ids separated by comma, max number of hotel ids is 10, example (2345,557,56)
func (r SearchApiGetHotelRatesRequest) HotelIds(hotelIds string) SearchApiGetHotelRatesRequest {
	r.hotelIds = &hotelIds
	return r
}

// start date yyyy-mm-dd format
func (r SearchApiGetHotelRatesRequest) Checkin(checkin string) SearchApiGetHotelRatesRequest {
	r.checkin = &checkin
	return r
}

// end date yyyy-mm-dd format
func (r SearchApiGetHotelRatesRequest) Checkout(checkout string) SearchApiGetHotelRatesRequest {
	r.checkout = &checkout
	return r
}

// adults number
func (r SearchApiGetHotelRatesRequest) Adults(adults int32) SearchApiGetHotelRatesRequest {
	r.adults = &adults
	return r
}

// guest nationality country code iso-2 example (US)
func (r SearchApiGetHotelRatesRequest) GuestNationality(guestNationality string) SearchApiGetHotelRatesRequest {
	r.guestNationality = &guestNationality
	return r
}

// currency code example (USD)
func (r SearchApiGetHotelRatesRequest) Currency(currency string) SearchApiGetHotelRatesRequest {
	r.currency = &currency
	return r
}

// children ages separated by a comma
func (r SearchApiGetHotelRatesRequest) Children(children string) SearchApiGetHotelRatesRequest {
	r.children = &children
	return r
}

// session id if retrieved from hotels search
func (r SearchApiGetHotelRatesRequest) SessionId(sessionId string) SearchApiGetHotelRatesRequest {
	r.sessionId = &sessionId
	return r
}

// traveler unique id
func (r SearchApiGetHotelRatesRequest) TravelerId(travelerId string) SearchApiGetHotelRatesRequest {
	r.travelerId = &travelerId
	return r
}

func (r SearchApiGetHotelRatesRequest) Execute() (*GetHotelRatesResponse, *http.Response, error) {
	return r.ApiService.GetHotelRatesExecute(r)
}

/*
GetHotelRates Hotel full rate availability

This endpoint allows you to send a hotel ID with a specific date range and in response receive all the rooms, rates that are available along with the cancelllation policies.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SearchApiGetHotelRatesRequest
*/
func (a *SearchApiService) GetHotelRates() SearchApiGetHotelRatesRequest {
	return SearchApiGetHotelRatesRequest{
		ApiService: a,
		ctx: a.client.cfg.Context,
	}
}

// Execute executes the request
//  @return GetHotelRatesResponse
func (a *SearchApiService) GetHotelRatesExecute(r SearchApiGetHotelRatesRequest) (*GetHotelRatesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetHotelRatesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchApiService.GetHotelRates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/rates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.hotelIds == nil {
		return localVarReturnValue, nil, reportError("hotelIds is required and must be specified")
	}
	if r.checkin == nil {
		return localVarReturnValue, nil, reportError("checkin is required and must be specified")
	}
	if r.checkout == nil {
		return localVarReturnValue, nil, reportError("checkout is required and must be specified")
	}
	if r.adults == nil {
		return localVarReturnValue, nil, reportError("adults is required and must be specified")
	}
	if r.guestNationality == nil {
		return localVarReturnValue, nil, reportError("guestNationality is required and must be specified")
	}
	if r.currency == nil {
		return localVarReturnValue, nil, reportError("currency is required and must be specified")
	}

	localVarQueryParams.Add("hotelIds", parameterToString(*r.hotelIds, ""))
	localVarQueryParams.Add("checkin", parameterToString(*r.checkin, ""))
	localVarQueryParams.Add("checkout", parameterToString(*r.checkout, ""))
	localVarQueryParams.Add("adults", parameterToString(*r.adults, ""))
	if r.children != nil {
		localVarQueryParams.Add("children", parameterToString(*r.children, ""))
	}
	localVarQueryParams.Add("guestNationality", parameterToString(*r.guestNationality, ""))
	localVarQueryParams.Add("currency", parameterToString(*r.currency, ""))
	if r.sessionId != nil {
		localVarQueryParams.Add("sessionId", parameterToString(*r.sessionId, ""))
	}
	if r.travelerId != nil {
		localVarQueryParams.Add("travelerId", parameterToString(*r.travelerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v GetHotelRates400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v GetHotelRates401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SearchApiGetHotelsRequest struct {
	ctx context.Context
	ApiService *SearchApiService
	hotelIds *string
	checkin *string
	checkout *string
	country *string
	adults *int32
	currency *string
	guestNationality *string
	latitude *float32
	longitude *float32
	distance *int32
	children *string
	travelerId *string
}

// hotel ids separated by comma, max number of hotel ids is 10, example (2345,557,56)
func (r SearchApiGetHotelsRequest) HotelIds(hotelIds string) SearchApiGetHotelsRequest {
	r.hotelIds = &hotelIds
	return r
}

func (r SearchApiGetHotelsRequest) Checkin(checkin string) SearchApiGetHotelsRequest {
	r.checkin = &checkin
	return r
}

func (r SearchApiGetHotelsRequest) Checkout(checkout string) SearchApiGetHotelsRequest {
	r.checkout = &checkout
	return r
}

func (r SearchApiGetHotelsRequest) Country(country string) SearchApiGetHotelsRequest {
	r.country = &country
	return r
}

func (r SearchApiGetHotelsRequest) Adults(adults int32) SearchApiGetHotelsRequest {
	r.adults = &adults
	return r
}

func (r SearchApiGetHotelsRequest) Currency(currency string) SearchApiGetHotelsRequest {
	r.currency = &currency
	return r
}

func (r SearchApiGetHotelsRequest) GuestNationality(guestNationality string) SearchApiGetHotelsRequest {
	r.guestNationality = &guestNationality
	return r
}

func (r SearchApiGetHotelsRequest) Latitude(latitude float32) SearchApiGetHotelsRequest {
	r.latitude = &latitude
	return r
}

func (r SearchApiGetHotelsRequest) Longitude(longitude float32) SearchApiGetHotelsRequest {
	r.longitude = &longitude
	return r
}

func (r SearchApiGetHotelsRequest) Distance(distance int32) SearchApiGetHotelsRequest {
	r.distance = &distance
	return r
}

func (r SearchApiGetHotelsRequest) Children(children string) SearchApiGetHotelsRequest {
	r.children = &children
	return r
}

func (r SearchApiGetHotelsRequest) TravelerId(travelerId string) SearchApiGetHotelsRequest {
	r.travelerId = &travelerId
	return r
}

func (r SearchApiGetHotelsRequest) Execute() (*GetHotelsResponse, *http.Response, error) {
	return r.ApiService.GetHotelsExecute(r)
}

/*
GetHotels Hotel minimum rate availability

This endpoint allows you to send a list of hotel ID's for a specific date range and in response receive the best rate available for each of the hotel ID's. The limit is set to 200 hotels

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SearchApiGetHotelsRequest
*/
func (a *SearchApiService) GetHotels() SearchApiGetHotelsRequest {
	return SearchApiGetHotelsRequest{
		ApiService: a,
		ctx: a.client.cfg.Context,
	}
}

// Execute executes the request
//  @return GetHotelsResponse
func (a *SearchApiService) GetHotelsExecute(r SearchApiGetHotelsRequest) (*GetHotelsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetHotelsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchApiService.GetHotels")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.hotelIds == nil {
		return localVarReturnValue, nil, reportError("hotelIds is required and must be specified")
	}
	if r.checkin == nil {
		return localVarReturnValue, nil, reportError("checkin is required and must be specified")
	}
	if r.checkout == nil {
		return localVarReturnValue, nil, reportError("checkout is required and must be specified")
	}
	if r.country == nil {
		return localVarReturnValue, nil, reportError("country is required and must be specified")
	}
	if r.adults == nil {
		return localVarReturnValue, nil, reportError("adults is required and must be specified")
	}
	if r.currency == nil {
		return localVarReturnValue, nil, reportError("currency is required and must be specified")
	}
	if r.guestNationality == nil {
		return localVarReturnValue, nil, reportError("guestNationality is required and must be specified")
	}

	localVarQueryParams.Add("hotelIds", parameterToString(*r.hotelIds, ""))
	localVarQueryParams.Add("checkin", parameterToString(*r.checkin, ""))
	localVarQueryParams.Add("checkout", parameterToString(*r.checkout, ""))
	localVarQueryParams.Add("country", parameterToString(*r.country, ""))
	if r.latitude != nil {
		localVarQueryParams.Add("latitude", parameterToString(*r.latitude, ""))
	}
	if r.longitude != nil {
		localVarQueryParams.Add("longitude", parameterToString(*r.longitude, ""))
	}
	if r.distance != nil {
		localVarQueryParams.Add("distance", parameterToString(*r.distance, ""))
	}
	localVarQueryParams.Add("adults", parameterToString(*r.adults, ""))
	if r.children != nil {
		localVarQueryParams.Add("children", parameterToString(*r.children, ""))
	}
	localVarQueryParams.Add("currency", parameterToString(*r.currency, ""))
	localVarQueryParams.Add("guestNationality", parameterToString(*r.guestNationality, ""))
	if r.travelerId != nil {
		localVarQueryParams.Add("travelerId", parameterToString(*r.travelerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v GetHotels400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v GetHotels401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

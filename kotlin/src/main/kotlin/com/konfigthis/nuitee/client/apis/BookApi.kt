/**
 *
 * Please note:
 * This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.konfigthis.nuitee.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.konfigthis.nuitee.client.models.Book400Response
import com.konfigthis.nuitee.client.models.Book401Response
import com.konfigthis.nuitee.client.models.Book500Response
import com.konfigthis.nuitee.client.models.BookRequest
import com.konfigthis.nuitee.client.models.BookResponse
import com.konfigthis.nuitee.client.models.Prebook401Response
import com.konfigthis.nuitee.client.models.PrebookRequest
import com.konfigthis.nuitee.client.models.PrebookResponse

import com.squareup.moshi.Json

import com.konfigthis.nuitee.client.infrastructure.ApiClient
import com.konfigthis.nuitee.client.infrastructure.ApiResponse
import com.konfigthis.nuitee.client.infrastructure.ClientException
import com.konfigthis.nuitee.client.infrastructure.ClientError
import com.konfigthis.nuitee.client.infrastructure.ServerException
import com.konfigthis.nuitee.client.infrastructure.ServerError
import com.konfigthis.nuitee.client.infrastructure.MultiValueMap
import com.konfigthis.nuitee.client.infrastructure.PartConfig
import com.konfigthis.nuitee.client.infrastructure.RequestConfig
import com.konfigthis.nuitee.client.infrastructure.RequestMethod
import com.konfigthis.nuitee.client.infrastructure.ResponseType
import com.konfigthis.nuitee.client.infrastructure.Success
import com.konfigthis.nuitee.client.infrastructure.toMultiValue

class BookApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.nlite.ml/v1.0")
        }
    }

    /**
     * Hotel rate book
     * This endpoint allows you to send a specific prebook ID along with the email to confirm the booking for a specific room in a specific hotel.
     * @param bookRequest  (optional)
     * @return BookResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun book(bookRequest: BookRequest? = null) : BookResponse {
        val localVarResponse = bookWithHttpInfo(bookRequest = bookRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BookResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Hotel rate book
     * This endpoint allows you to send a specific prebook ID along with the email to confirm the booking for a specific room in a specific hotel.
     * @param bookRequest  (optional)
     * @return ApiResponse<BookResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun bookWithHttpInfo(bookRequest: BookRequest?) : ApiResponse<BookResponse?> {
        val localVariableConfig = bookRequestConfig(bookRequest = bookRequest)

        return request<BookRequest, BookResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation book
     *
     * @param bookRequest  (optional)
     * @return RequestConfig
     */
    fun bookRequestConfig(bookRequest: BookRequest?) : RequestConfig<BookRequest> {
        val localVariableBody = bookRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rates/book",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Hotel rate prebook
     * This endpoint allows you to send a specific rate ID along with the session ID to confirm the room availability, rates and cancellation policies in the response. A prebook-id is also part of the response which can be used to book a specific room in a hotel. 
     * @param prebookRequest  (optional)
     * @return PrebookResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun prebook(prebookRequest: PrebookRequest? = null) : PrebookResponse {
        val localVarResponse = prebookWithHttpInfo(prebookRequest = prebookRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PrebookResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Hotel rate prebook
     * This endpoint allows you to send a specific rate ID along with the session ID to confirm the room availability, rates and cancellation policies in the response. A prebook-id is also part of the response which can be used to book a specific room in a hotel. 
     * @param prebookRequest  (optional)
     * @return ApiResponse<PrebookResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun prebookWithHttpInfo(prebookRequest: PrebookRequest?) : ApiResponse<PrebookResponse?> {
        val localVariableConfig = prebookRequestConfig(prebookRequest = prebookRequest)

        return request<PrebookRequest, PrebookResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation prebook
     *
     * @param prebookRequest  (optional)
     * @return RequestConfig
     */
    fun prebookRequestConfig(prebookRequest: PrebookRequest?) : RequestConfig<PrebookRequest> {
        val localVariableBody = prebookRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rates/prebook",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}

/**
 *
 * Please note:
 * This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.konfigthis.nuitee.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.konfigthis.nuitee.client.models.ListCitiesResponse
import com.konfigthis.nuitee.client.models.ListCountriesResponse
import com.konfigthis.nuitee.client.models.ListCurrenciesResponse
import com.konfigthis.nuitee.client.models.ListHotels400Response
import com.konfigthis.nuitee.client.models.ListHotels401Response
import com.konfigthis.nuitee.client.models.ListHotelsResponse
import com.konfigthis.nuitee.client.models.ListIataCodesResponse

import com.squareup.moshi.Json

import com.konfigthis.nuitee.client.infrastructure.ApiClient
import com.konfigthis.nuitee.client.infrastructure.ApiResponse
import com.konfigthis.nuitee.client.infrastructure.ClientException
import com.konfigthis.nuitee.client.infrastructure.ClientError
import com.konfigthis.nuitee.client.infrastructure.ServerException
import com.konfigthis.nuitee.client.infrastructure.ServerError
import com.konfigthis.nuitee.client.infrastructure.MultiValueMap
import com.konfigthis.nuitee.client.infrastructure.PartConfig
import com.konfigthis.nuitee.client.infrastructure.RequestConfig
import com.konfigthis.nuitee.client.infrastructure.RequestMethod
import com.konfigthis.nuitee.client.infrastructure.ResponseType
import com.konfigthis.nuitee.client.infrastructure.Success
import com.konfigthis.nuitee.client.infrastructure.toMultiValue

class StaticDataApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.nlite.ml/v1.0")
        }
    }

    /**
     * City list
     * 
     * @param countryCode country code, example \&quot;IT\&quot; (optional)
     * @return ListCitiesResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listCities(countryCode: kotlin.String? = null) : ListCitiesResponse {
        val localVarResponse = listCitiesWithHttpInfo(countryCode = countryCode)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ListCitiesResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * City list
     * 
     * @param countryCode country code, example \&quot;IT\&quot; (optional)
     * @return ApiResponse<ListCitiesResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listCitiesWithHttpInfo(countryCode: kotlin.String?) : ApiResponse<ListCitiesResponse?> {
        val localVariableConfig = listCitiesRequestConfig(countryCode = countryCode)

        return request<Unit, ListCitiesResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listCities
     *
     * @param countryCode country code, example \&quot;IT\&quot; (optional)
     * @return RequestConfig
     */
    fun listCitiesRequestConfig(countryCode: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (countryCode != null) {
                    put("countryCode", listOf(countryCode.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/data/cities",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Country list
     * countries list
     * @return ListCountriesResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listCountries() : ListCountriesResponse {
        val localVarResponse = listCountriesWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ListCountriesResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Country list
     * countries list
     * @return ApiResponse<ListCountriesResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listCountriesWithHttpInfo() : ApiResponse<ListCountriesResponse?> {
        val localVariableConfig = listCountriesRequestConfig()

        return request<Unit, ListCountriesResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listCountries
     *
     * @return RequestConfig
     */
    fun listCountriesRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/data/countries",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Currency list
     * 
     * @return ListCurrenciesResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listCurrencies() : ListCurrenciesResponse {
        val localVarResponse = listCurrenciesWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ListCurrenciesResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Currency list
     * 
     * @return ApiResponse<ListCurrenciesResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listCurrenciesWithHttpInfo() : ApiResponse<ListCurrenciesResponse?> {
        val localVariableConfig = listCurrenciesRequestConfig()

        return request<Unit, ListCurrenciesResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listCurrencies
     *
     * @return RequestConfig
     */
    fun listCurrenciesRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/data/currencies",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Hotel list
     * 
     * @param countryCode country code Alpha-2 code (example US, RU, CN)
     * @param hotelName hotel name (optional)
     * @param cityName city name (optional)
     * @param limit limit results (max value 1000) (optional)
     * @param offset results offset (optional)
     * @param latitude latitude geo coordinates (optional)
     * @param longitude longtude geo coordinates (optional)
     * @param distance the distance starting from the selected geopgraphic point (optional)
     * @param iataCode airport iata code (optional)
     * @return ListHotelsResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listHotels(countryCode: kotlin.String, hotelName: kotlin.String? = null, cityName: kotlin.String? = null, limit: kotlin.Int? = null, offset: kotlin.Int? = null, latitude: java.math.BigDecimal? = null, longitude: java.math.BigDecimal? = null, distance: kotlin.Int? = null, iataCode: kotlin.String? = null) : ListHotelsResponse {
        val localVarResponse = listHotelsWithHttpInfo(countryCode = countryCode, hotelName = hotelName, cityName = cityName, limit = limit, offset = offset, latitude = latitude, longitude = longitude, distance = distance, iataCode = iataCode)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ListHotelsResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Hotel list
     * 
     * @param countryCode country code Alpha-2 code (example US, RU, CN)
     * @param hotelName hotel name (optional)
     * @param cityName city name (optional)
     * @param limit limit results (max value 1000) (optional)
     * @param offset results offset (optional)
     * @param latitude latitude geo coordinates (optional)
     * @param longitude longtude geo coordinates (optional)
     * @param distance the distance starting from the selected geopgraphic point (optional)
     * @param iataCode airport iata code (optional)
     * @return ApiResponse<ListHotelsResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listHotelsWithHttpInfo(countryCode: kotlin.String, hotelName: kotlin.String?, cityName: kotlin.String?, limit: kotlin.Int?, offset: kotlin.Int?, latitude: java.math.BigDecimal?, longitude: java.math.BigDecimal?, distance: kotlin.Int?, iataCode: kotlin.String?) : ApiResponse<ListHotelsResponse?> {
        val localVariableConfig = listHotelsRequestConfig(countryCode = countryCode, hotelName = hotelName, cityName = cityName, limit = limit, offset = offset, latitude = latitude, longitude = longitude, distance = distance, iataCode = iataCode)

        return request<Unit, ListHotelsResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listHotels
     *
     * @param countryCode country code Alpha-2 code (example US, RU, CN)
     * @param hotelName hotel name (optional)
     * @param cityName city name (optional)
     * @param limit limit results (max value 1000) (optional)
     * @param offset results offset (optional)
     * @param latitude latitude geo coordinates (optional)
     * @param longitude longtude geo coordinates (optional)
     * @param distance the distance starting from the selected geopgraphic point (optional)
     * @param iataCode airport iata code (optional)
     * @return RequestConfig
     */
    fun listHotelsRequestConfig(countryCode: kotlin.String, hotelName: kotlin.String?, cityName: kotlin.String?, limit: kotlin.Int?, offset: kotlin.Int?, latitude: java.math.BigDecimal?, longitude: java.math.BigDecimal?, distance: kotlin.Int?, iataCode: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (hotelName != null) {
                    put("hotelName", listOf(hotelName.toString()))
                }
                if (cityName != null) {
                    put("cityName", listOf(cityName.toString()))
                }
                put("countryCode", listOf(countryCode.toString()))
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
                if (latitude != null) {
                    put("latitude", listOf(latitude.toString()))
                }
                if (longitude != null) {
                    put("longitude", listOf(longitude.toString()))
                }
                if (distance != null) {
                    put("distance", listOf(distance.toString()))
                }
                if (iataCode != null) {
                    put("iataCode", listOf(iataCode.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/data/hotels",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * IATA code list
     * IATA codes list
     * @return ListIataCodesResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listIataCodes() : ListIataCodesResponse {
        val localVarResponse = listIataCodesWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ListIataCodesResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IATA code list
     * IATA codes list
     * @return ApiResponse<ListIataCodesResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listIataCodesWithHttpInfo() : ApiResponse<ListIataCodesResponse?> {
        val localVariableConfig = listIataCodesRequestConfig()

        return request<Unit, ListIataCodesResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listIataCodes
     *
     * @return RequestConfig
     */
    fun listIataCodesRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/data/iataCodes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}

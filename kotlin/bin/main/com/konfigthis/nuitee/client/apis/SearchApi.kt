/**
 *
 * Please note:
 * This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.konfigthis.nuitee.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.konfigthis.nuitee.client.models.GetHotelRates400Response
import com.konfigthis.nuitee.client.models.GetHotelRates401Response
import com.konfigthis.nuitee.client.models.GetHotelRatesResponse
import com.konfigthis.nuitee.client.models.GetHotels400Response
import com.konfigthis.nuitee.client.models.GetHotels401Response
import com.konfigthis.nuitee.client.models.GetHotelsResponse

import com.squareup.moshi.Json

import com.konfigthis.nuitee.client.infrastructure.ApiClient
import com.konfigthis.nuitee.client.infrastructure.ApiResponse
import com.konfigthis.nuitee.client.infrastructure.ClientException
import com.konfigthis.nuitee.client.infrastructure.ClientError
import com.konfigthis.nuitee.client.infrastructure.ServerException
import com.konfigthis.nuitee.client.infrastructure.ServerError
import com.konfigthis.nuitee.client.infrastructure.MultiValueMap
import com.konfigthis.nuitee.client.infrastructure.PartConfig
import com.konfigthis.nuitee.client.infrastructure.RequestConfig
import com.konfigthis.nuitee.client.infrastructure.RequestMethod
import com.konfigthis.nuitee.client.infrastructure.ResponseType
import com.konfigthis.nuitee.client.infrastructure.Success
import com.konfigthis.nuitee.client.infrastructure.toMultiValue

class SearchApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.nlite.ml/v1.0")
        }
    }

    /**
     * Hotel full rate availability
     * This endpoint allows you to send a hotel ID with a specific date range and in response receive all the rooms, rates that are available along with the cancelllation policies.
     * @param hotelIds hotel ids separated by comma, max number of hotel ids is 10, example (2345,557,56)
     * @param checkin start date yyyy-mm-dd format
     * @param checkout end date yyyy-mm-dd format
     * @param adults adults number
     * @param guestNationality guest nationality country code iso-2 example (US)
     * @param currency currency code example (USD)
     * @param children children ages separated by a comma (optional)
     * @param sessionId session id if retrieved from hotels search (optional)
     * @param travelerId traveler unique id (optional)
     * @return GetHotelRatesResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getHotelRates(hotelIds: kotlin.String, checkin: kotlin.String, checkout: kotlin.String, adults: kotlin.Int, guestNationality: kotlin.String, currency: kotlin.String, children: kotlin.String? = null, sessionId: kotlin.String? = null, travelerId: kotlin.String? = null) : GetHotelRatesResponse {
        val localVarResponse = getHotelRatesWithHttpInfo(hotelIds = hotelIds, checkin = checkin, checkout = checkout, adults = adults, guestNationality = guestNationality, currency = currency, children = children, sessionId = sessionId, travelerId = travelerId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetHotelRatesResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Hotel full rate availability
     * This endpoint allows you to send a hotel ID with a specific date range and in response receive all the rooms, rates that are available along with the cancelllation policies.
     * @param hotelIds hotel ids separated by comma, max number of hotel ids is 10, example (2345,557,56)
     * @param checkin start date yyyy-mm-dd format
     * @param checkout end date yyyy-mm-dd format
     * @param adults adults number
     * @param guestNationality guest nationality country code iso-2 example (US)
     * @param currency currency code example (USD)
     * @param children children ages separated by a comma (optional)
     * @param sessionId session id if retrieved from hotels search (optional)
     * @param travelerId traveler unique id (optional)
     * @return ApiResponse<GetHotelRatesResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getHotelRatesWithHttpInfo(hotelIds: kotlin.String, checkin: kotlin.String, checkout: kotlin.String, adults: kotlin.Int, guestNationality: kotlin.String, currency: kotlin.String, children: kotlin.String?, sessionId: kotlin.String?, travelerId: kotlin.String?) : ApiResponse<GetHotelRatesResponse?> {
        val localVariableConfig = getHotelRatesRequestConfig(hotelIds = hotelIds, checkin = checkin, checkout = checkout, adults = adults, guestNationality = guestNationality, currency = currency, children = children, sessionId = sessionId, travelerId = travelerId)

        return request<Unit, GetHotelRatesResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getHotelRates
     *
     * @param hotelIds hotel ids separated by comma, max number of hotel ids is 10, example (2345,557,56)
     * @param checkin start date yyyy-mm-dd format
     * @param checkout end date yyyy-mm-dd format
     * @param adults adults number
     * @param guestNationality guest nationality country code iso-2 example (US)
     * @param currency currency code example (USD)
     * @param children children ages separated by a comma (optional)
     * @param sessionId session id if retrieved from hotels search (optional)
     * @param travelerId traveler unique id (optional)
     * @return RequestConfig
     */
    fun getHotelRatesRequestConfig(hotelIds: kotlin.String, checkin: kotlin.String, checkout: kotlin.String, adults: kotlin.Int, guestNationality: kotlin.String, currency: kotlin.String, children: kotlin.String?, sessionId: kotlin.String?, travelerId: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("hotelIds", listOf(hotelIds.toString()))
                put("checkin", listOf(checkin.toString()))
                put("checkout", listOf(checkout.toString()))
                put("adults", listOf(adults.toString()))
                if (children != null) {
                    put("children", listOf(children.toString()))
                }
                put("guestNationality", listOf(guestNationality.toString()))
                put("currency", listOf(currency.toString()))
                if (sessionId != null) {
                    put("sessionId", listOf(sessionId.toString()))
                }
                if (travelerId != null) {
                    put("travelerId", listOf(travelerId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/hotels/rates",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Hotel minimum rate availability
     * This endpoint allows you to send a list of hotel ID&#39;s for a specific date range and in response receive the best rate available for each of the hotel ID&#39;s. The limit is set to 200 hotels
     * @param checkin 
     * @param checkout 
     * @param country 
     * @param adults 
     * @param currency 
     * @param guestNationality 
     * @param latitude  (optional)
     * @param longitude  (optional)
     * @param distance  (optional)
     * @param children  (optional)
     * @param travelerId  (optional)
     * @return GetHotelsResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getHotels(checkin: java.time.LocalDate, checkout: java.time.LocalDate, country: kotlin.String, adults: kotlin.Int, currency: kotlin.String, guestNationality: kotlin.String, latitude: java.math.BigDecimal? = null, longitude: java.math.BigDecimal? = null, distance: kotlin.Int? = null, children: kotlin.String? = null, travelerId: kotlin.String? = null) : GetHotelsResponse {
        val localVarResponse = getHotelsWithHttpInfo(checkin = checkin, checkout = checkout, country = country, adults = adults, currency = currency, guestNationality = guestNationality, latitude = latitude, longitude = longitude, distance = distance, children = children, travelerId = travelerId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetHotelsResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Hotel minimum rate availability
     * This endpoint allows you to send a list of hotel ID&#39;s for a specific date range and in response receive the best rate available for each of the hotel ID&#39;s. The limit is set to 200 hotels
     * @param checkin 
     * @param checkout 
     * @param country 
     * @param adults 
     * @param currency 
     * @param guestNationality 
     * @param latitude  (optional)
     * @param longitude  (optional)
     * @param distance  (optional)
     * @param children  (optional)
     * @param travelerId  (optional)
     * @return ApiResponse<GetHotelsResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getHotelsWithHttpInfo(checkin: java.time.LocalDate, checkout: java.time.LocalDate, country: kotlin.String, adults: kotlin.Int, currency: kotlin.String, guestNationality: kotlin.String, latitude: java.math.BigDecimal?, longitude: java.math.BigDecimal?, distance: kotlin.Int?, children: kotlin.String?, travelerId: kotlin.String?) : ApiResponse<GetHotelsResponse?> {
        val localVariableConfig = getHotelsRequestConfig(checkin = checkin, checkout = checkout, country = country, adults = adults, currency = currency, guestNationality = guestNationality, latitude = latitude, longitude = longitude, distance = distance, children = children, travelerId = travelerId)

        return request<Unit, GetHotelsResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getHotels
     *
     * @param checkin 
     * @param checkout 
     * @param country 
     * @param adults 
     * @param currency 
     * @param guestNationality 
     * @param latitude  (optional)
     * @param longitude  (optional)
     * @param distance  (optional)
     * @param children  (optional)
     * @param travelerId  (optional)
     * @return RequestConfig
     */
    fun getHotelsRequestConfig(checkin: java.time.LocalDate, checkout: java.time.LocalDate, country: kotlin.String, adults: kotlin.Int, currency: kotlin.String, guestNationality: kotlin.String, latitude: java.math.BigDecimal?, longitude: java.math.BigDecimal?, distance: kotlin.Int?, children: kotlin.String?, travelerId: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("checkin", listOf(parseDateToQueryString(checkin)))
                put("checkout", listOf(parseDateToQueryString(checkout)))
                put("country", listOf(country.toString()))
                if (latitude != null) {
                    put("latitude", listOf(latitude.toString()))
                }
                if (longitude != null) {
                    put("longitude", listOf(longitude.toString()))
                }
                if (distance != null) {
                    put("distance", listOf(distance.toString()))
                }
                put("adults", listOf(adults.toString()))
                if (children != null) {
                    put("children", listOf(children.toString()))
                }
                put("currency", listOf(currency.toString()))
                put("guestNationality", listOf(guestNationality.toString()))
                if (travelerId != null) {
                    put("travelerId", listOf(travelerId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/hotels",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
